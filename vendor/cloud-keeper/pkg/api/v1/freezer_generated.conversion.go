// +build !ignore_autogenerated

/*
Copyright 2016 The cloud-keeper Authors.
*/

// This file was autogenerated by conversion-gen. Do not edit it manually!

package v1

import (
	pkg_api "gofreezer/pkg/api"
	. "gofreezer/pkg/api/v1"
	"gofreezer/pkg/conversion"
	runtime "gofreezer/pkg/runtime"
	"gofreezer/pkg/types"
)

func init() {
	SchemeBuilder.Register(RegisterFreezerConversions)
}

// RegisterConversions adds conversion functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterFreezerConversions(scheme *runtime.Scheme) error {
	return scheme.AddGeneratedConversionFuncs(
		Convert_v1_DeleteOptions_To_api_DeleteOptions,
		Convert_api_DeleteOptions_To_v1_DeleteOptions,
		Convert_v1_ExportOptions_To_api_ExportOptions,
		Convert_api_ExportOptions_To_v1_ExportOptions,
		Convert_v1_ListOptions_To_api_ListOptions,
		Convert_api_ListOptions_To_v1_ListOptions,
		Convert_v1_Namespace_To_api_Namespace,
		Convert_api_Namespace_To_v1_Namespace,
		Convert_v1_NamespaceList_To_api_NamespaceList,
		Convert_api_NamespaceList_To_v1_NamespaceList,
		Convert_v1_NamespaceSpec_To_api_NamespaceSpec,
		Convert_api_NamespaceSpec_To_v1_NamespaceSpec,
		Convert_v1_NamespaceStatus_To_api_NamespaceStatus,
		Convert_api_NamespaceStatus_To_v1_NamespaceStatus,
		Convert_v1_ObjectMeta_To_api_ObjectMeta,
		Convert_api_ObjectMeta_To_v1_ObjectMeta,
		Convert_v1_OwnerReference_To_api_OwnerReference,
		Convert_api_OwnerReference_To_v1_OwnerReference,
		Convert_v1_Preconditions_To_api_Preconditions,
		Convert_api_Preconditions_To_v1_Preconditions,
	)
}

func autoConvert_v1_DeleteOptions_To_api_DeleteOptions(in *DeleteOptions, out *pkg_api.DeleteOptions, s conversion.Scope) error {
	if err := pkg_api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	out.GracePeriodSeconds = in.GracePeriodSeconds
	if in.Preconditions != nil {
		in, out := &in.Preconditions, &out.Preconditions
		*out = new(pkg_api.Preconditions)
		if err := Convert_v1_Preconditions_To_api_Preconditions(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Preconditions = nil
	}
	out.OrphanDependents = in.OrphanDependents
	return nil
}

func Convert_v1_DeleteOptions_To_api_DeleteOptions(in *DeleteOptions, out *pkg_api.DeleteOptions, s conversion.Scope) error {
	return autoConvert_v1_DeleteOptions_To_api_DeleteOptions(in, out, s)
}

func autoConvert_api_DeleteOptions_To_v1_DeleteOptions(in *pkg_api.DeleteOptions, out *DeleteOptions, s conversion.Scope) error {
	if err := pkg_api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	out.GracePeriodSeconds = in.GracePeriodSeconds
	if in.Preconditions != nil {
		in, out := &in.Preconditions, &out.Preconditions
		*out = new(Preconditions)
		if err := Convert_api_Preconditions_To_v1_Preconditions(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Preconditions = nil
	}
	out.OrphanDependents = in.OrphanDependents
	return nil
}

func Convert_api_DeleteOptions_To_v1_DeleteOptions(in *pkg_api.DeleteOptions, out *DeleteOptions, s conversion.Scope) error {
	return autoConvert_api_DeleteOptions_To_v1_DeleteOptions(in, out, s)
}

func autoConvert_v1_ExportOptions_To_api_ExportOptions(in *ExportOptions, out *pkg_api.ExportOptions, s conversion.Scope) error {
	if err := pkg_api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	out.Export = in.Export
	out.Exact = in.Exact
	return nil
}

func Convert_v1_ExportOptions_To_api_ExportOptions(in *ExportOptions, out *pkg_api.ExportOptions, s conversion.Scope) error {
	return autoConvert_v1_ExportOptions_To_api_ExportOptions(in, out, s)
}

func autoConvert_api_ExportOptions_To_v1_ExportOptions(in *pkg_api.ExportOptions, out *ExportOptions, s conversion.Scope) error {
	if err := pkg_api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	out.Export = in.Export
	out.Exact = in.Exact
	return nil
}

func Convert_api_ExportOptions_To_v1_ExportOptions(in *pkg_api.ExportOptions, out *ExportOptions, s conversion.Scope) error {
	return autoConvert_api_ExportOptions_To_v1_ExportOptions(in, out, s)
}

func autoConvert_v1_ListOptions_To_api_ListOptions(in *ListOptions, out *pkg_api.ListOptions, s conversion.Scope) error {
	if err := pkg_api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := pkg_api.Convert_string_To_labels_Selector(&in.LabelSelector, &out.LabelSelector, s); err != nil {
		return err
	}
	if err := pkg_api.Convert_string_To_fields_Selector(&in.FieldSelector, &out.FieldSelector, s); err != nil {
		return err
	}
	out.Watch = in.Watch
	out.ResourceVersion = in.ResourceVersion
	out.TimeoutSeconds = in.TimeoutSeconds
	if err := pkg_api.Convert_string_To_pages_Selector(&in.PageSelector, &out.PageSelector, s); err != nil {
		return err
	}
	return nil
}

func Convert_v1_ListOptions_To_api_ListOptions(in *ListOptions, out *pkg_api.ListOptions, s conversion.Scope) error {
	return autoConvert_v1_ListOptions_To_api_ListOptions(in, out, s)
}

func autoConvert_api_ListOptions_To_v1_ListOptions(in *pkg_api.ListOptions, out *ListOptions, s conversion.Scope) error {
	if err := pkg_api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := pkg_api.Convert_labels_Selector_To_string(&in.LabelSelector, &out.LabelSelector, s); err != nil {
		return err
	}
	if err := pkg_api.Convert_fields_Selector_To_string(&in.FieldSelector, &out.FieldSelector, s); err != nil {
		return err
	}
	out.Watch = in.Watch
	out.ResourceVersion = in.ResourceVersion
	out.TimeoutSeconds = in.TimeoutSeconds
	if err := pkg_api.Convert_pages_Selector_To_string(&in.PageSelector, &out.PageSelector, s); err != nil {
		return err
	}
	return nil
}

func Convert_api_ListOptions_To_v1_ListOptions(in *pkg_api.ListOptions, out *ListOptions, s conversion.Scope) error {
	return autoConvert_api_ListOptions_To_v1_ListOptions(in, out, s)
}

func autoConvert_v1_Namespace_To_api_Namespace(in *Namespace, out *pkg_api.Namespace, s conversion.Scope) error {
	if err := pkg_api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := Convert_v1_ObjectMeta_To_api_ObjectMeta(&in.ObjectMeta, &out.ObjectMeta, s); err != nil {
		return err
	}
	if err := Convert_v1_NamespaceSpec_To_api_NamespaceSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_v1_NamespaceStatus_To_api_NamespaceStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

func Convert_v1_Namespace_To_api_Namespace(in *Namespace, out *pkg_api.Namespace, s conversion.Scope) error {
	return autoConvert_v1_Namespace_To_api_Namespace(in, out, s)
}

func autoConvert_api_Namespace_To_v1_Namespace(in *pkg_api.Namespace, out *Namespace, s conversion.Scope) error {
	if err := pkg_api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := Convert_api_ObjectMeta_To_v1_ObjectMeta(&in.ObjectMeta, &out.ObjectMeta, s); err != nil {
		return err
	}
	if err := Convert_api_NamespaceSpec_To_v1_NamespaceSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_api_NamespaceStatus_To_v1_NamespaceStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

func Convert_api_Namespace_To_v1_Namespace(in *pkg_api.Namespace, out *Namespace, s conversion.Scope) error {
	return autoConvert_api_Namespace_To_v1_Namespace(in, out, s)
}

func autoConvert_v1_NamespaceList_To_api_NamespaceList(in *NamespaceList, out *pkg_api.NamespaceList, s conversion.Scope) error {
	if err := pkg_api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := pkg_api.Convert_unversioned_ListMeta_To_unversioned_ListMeta(&in.ListMeta, &out.ListMeta, s); err != nil {
		return err
	}
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]pkg_api.Namespace, len(*in))
		for i := range *in {
			if err := Convert_v1_Namespace_To_api_Namespace(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_v1_NamespaceList_To_api_NamespaceList(in *NamespaceList, out *pkg_api.NamespaceList, s conversion.Scope) error {
	return autoConvert_v1_NamespaceList_To_api_NamespaceList(in, out, s)
}

func autoConvert_api_NamespaceList_To_v1_NamespaceList(in *pkg_api.NamespaceList, out *NamespaceList, s conversion.Scope) error {
	if err := pkg_api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := pkg_api.Convert_unversioned_ListMeta_To_unversioned_ListMeta(&in.ListMeta, &out.ListMeta, s); err != nil {
		return err
	}
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Namespace, len(*in))
		for i := range *in {
			if err := Convert_api_Namespace_To_v1_Namespace(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_api_NamespaceList_To_v1_NamespaceList(in *pkg_api.NamespaceList, out *NamespaceList, s conversion.Scope) error {
	return autoConvert_api_NamespaceList_To_v1_NamespaceList(in, out, s)
}

func autoConvert_v1_NamespaceSpec_To_api_NamespaceSpec(in *NamespaceSpec, out *pkg_api.NamespaceSpec, s conversion.Scope) error {
	if in.Finalizers != nil {
		in, out := &in.Finalizers, &out.Finalizers
		*out = make([]pkg_api.FinalizerName, len(*in))
		for i := range *in {
			(*out)[i] = pkg_api.FinalizerName((*in)[i])
		}
	} else {
		out.Finalizers = nil
	}
	return nil
}

func Convert_v1_NamespaceSpec_To_api_NamespaceSpec(in *NamespaceSpec, out *pkg_api.NamespaceSpec, s conversion.Scope) error {
	return autoConvert_v1_NamespaceSpec_To_api_NamespaceSpec(in, out, s)
}

func autoConvert_api_NamespaceSpec_To_v1_NamespaceSpec(in *pkg_api.NamespaceSpec, out *NamespaceSpec, s conversion.Scope) error {
	if in.Finalizers != nil {
		in, out := &in.Finalizers, &out.Finalizers
		*out = make([]FinalizerName, len(*in))
		for i := range *in {
			(*out)[i] = FinalizerName((*in)[i])
		}
	} else {
		out.Finalizers = nil
	}
	return nil
}

func Convert_api_NamespaceSpec_To_v1_NamespaceSpec(in *pkg_api.NamespaceSpec, out *NamespaceSpec, s conversion.Scope) error {
	return autoConvert_api_NamespaceSpec_To_v1_NamespaceSpec(in, out, s)
}

func autoConvert_v1_NamespaceStatus_To_api_NamespaceStatus(in *NamespaceStatus, out *pkg_api.NamespaceStatus, s conversion.Scope) error {
	out.Phase = pkg_api.NamespacePhase(in.Phase)
	return nil
}

func Convert_v1_NamespaceStatus_To_api_NamespaceStatus(in *NamespaceStatus, out *pkg_api.NamespaceStatus, s conversion.Scope) error {
	return autoConvert_v1_NamespaceStatus_To_api_NamespaceStatus(in, out, s)
}

func autoConvert_api_NamespaceStatus_To_v1_NamespaceStatus(in *pkg_api.NamespaceStatus, out *NamespaceStatus, s conversion.Scope) error {
	out.Phase = NamespacePhase(in.Phase)
	return nil
}

func Convert_api_NamespaceStatus_To_v1_NamespaceStatus(in *pkg_api.NamespaceStatus, out *NamespaceStatus, s conversion.Scope) error {
	return autoConvert_api_NamespaceStatus_To_v1_NamespaceStatus(in, out, s)
}

func autoConvert_v1_ObjectMeta_To_api_ObjectMeta(in *ObjectMeta, out *pkg_api.ObjectMeta, s conversion.Scope) error {
	out.Name = in.Name
	out.GenerateName = in.GenerateName
	out.Namespace = in.Namespace
	out.SelfLink = in.SelfLink
	out.UID = types.UID(in.UID)
	out.ResourceVersion = in.ResourceVersion
	out.Generation = in.Generation
	if err := pkg_api.Convert_unversioned_Time_To_unversioned_Time(&in.CreationTimestamp, &out.CreationTimestamp, s); err != nil {
		return err
	}
	out.DeletionTimestamp = in.DeletionTimestamp
	out.DeletionGracePeriodSeconds = in.DeletionGracePeriodSeconds
	out.Labels = in.Labels
	out.Annotations = in.Annotations
	if in.OwnerReferences != nil {
		in, out := &in.OwnerReferences, &out.OwnerReferences
		*out = make([]pkg_api.OwnerReference, len(*in))
		for i := range *in {
			if err := Convert_v1_OwnerReference_To_api_OwnerReference(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.OwnerReferences = nil
	}
	out.Finalizers = in.Finalizers
	out.ClusterName = in.ClusterName
	return nil
}

func Convert_v1_ObjectMeta_To_api_ObjectMeta(in *ObjectMeta, out *pkg_api.ObjectMeta, s conversion.Scope) error {
	return autoConvert_v1_ObjectMeta_To_api_ObjectMeta(in, out, s)
}

func autoConvert_api_ObjectMeta_To_v1_ObjectMeta(in *pkg_api.ObjectMeta, out *ObjectMeta, s conversion.Scope) error {
	out.Name = in.Name
	out.GenerateName = in.GenerateName
	out.Namespace = in.Namespace
	out.SelfLink = in.SelfLink
	out.UID = types.UID(in.UID)
	out.ResourceVersion = in.ResourceVersion
	out.Generation = in.Generation
	if err := pkg_api.Convert_unversioned_Time_To_unversioned_Time(&in.CreationTimestamp, &out.CreationTimestamp, s); err != nil {
		return err
	}
	out.DeletionTimestamp = in.DeletionTimestamp
	out.DeletionGracePeriodSeconds = in.DeletionGracePeriodSeconds
	out.Labels = in.Labels
	out.Annotations = in.Annotations
	if in.OwnerReferences != nil {
		in, out := &in.OwnerReferences, &out.OwnerReferences
		*out = make([]OwnerReference, len(*in))
		for i := range *in {
			if err := Convert_api_OwnerReference_To_v1_OwnerReference(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.OwnerReferences = nil
	}
	out.Finalizers = in.Finalizers
	out.ClusterName = in.ClusterName
	return nil
}

func Convert_api_ObjectMeta_To_v1_ObjectMeta(in *pkg_api.ObjectMeta, out *ObjectMeta, s conversion.Scope) error {
	return autoConvert_api_ObjectMeta_To_v1_ObjectMeta(in, out, s)
}

func autoConvert_v1_OwnerReference_To_api_OwnerReference(in *OwnerReference, out *pkg_api.OwnerReference, s conversion.Scope) error {
	out.APIVersion = in.APIVersion
	out.Kind = in.Kind
	out.Name = in.Name
	out.UID = types.UID(in.UID)
	out.Controller = in.Controller
	return nil
}

func Convert_v1_OwnerReference_To_api_OwnerReference(in *OwnerReference, out *pkg_api.OwnerReference, s conversion.Scope) error {
	return autoConvert_v1_OwnerReference_To_api_OwnerReference(in, out, s)
}

func autoConvert_api_OwnerReference_To_v1_OwnerReference(in *pkg_api.OwnerReference, out *OwnerReference, s conversion.Scope) error {
	out.APIVersion = in.APIVersion
	out.Kind = in.Kind
	out.Name = in.Name
	out.UID = types.UID(in.UID)
	out.Controller = in.Controller
	return nil
}

func Convert_api_OwnerReference_To_v1_OwnerReference(in *pkg_api.OwnerReference, out *OwnerReference, s conversion.Scope) error {
	return autoConvert_api_OwnerReference_To_v1_OwnerReference(in, out, s)
}

func autoConvert_v1_Preconditions_To_api_Preconditions(in *Preconditions, out *pkg_api.Preconditions, s conversion.Scope) error {
	out.UID = in.UID
	return nil
}

func Convert_v1_Preconditions_To_api_Preconditions(in *Preconditions, out *pkg_api.Preconditions, s conversion.Scope) error {
	return autoConvert_v1_Preconditions_To_api_Preconditions(in, out, s)
}

func autoConvert_api_Preconditions_To_v1_Preconditions(in *pkg_api.Preconditions, out *Preconditions, s conversion.Scope) error {
	out.UID = in.UID
	return nil
}

func Convert_api_Preconditions_To_v1_Preconditions(in *pkg_api.Preconditions, out *Preconditions, s conversion.Scope) error {
	return autoConvert_api_Preconditions_To_v1_Preconditions(in, out, s)
}
