// +build !ignore_autogenerated

/*
Copyright 2016 The cloud-keeper Authors.
*/

// This file was autogenerated by conversion-gen. Do not edit it manually!

package v1

import (
	api "cloud-keeper/pkg/api"
	conversion "gofreezer/pkg/conversion"
	runtime "gofreezer/pkg/runtime"
)

func init() {
	SchemeBuilder.Register(RegisterConversions)
}

// RegisterConversions adds conversion functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterConversions(scheme *runtime.Scheme) error {
	return scheme.AddGeneratedConversionFuncs(
		Convert_v1_APIServer_To_api_APIServer,
		Convert_api_APIServer_To_v1_APIServer,
		Convert_v1_APIServerInfor_To_api_APIServerInfor,
		Convert_api_APIServerInfor_To_v1_APIServerInfor,
		Convert_v1_APIServerList_To_api_APIServerList,
		Convert_api_APIServerList_To_v1_APIServerList,
		Convert_v1_APIServerSpec_To_api_APIServerSpec,
		Convert_api_APIServerSpec_To_v1_APIServerSpec,
		Convert_v1_AccExec_To_api_AccExec,
		Convert_api_AccExec_To_v1_AccExec,
		Convert_v1_AccExecSpec_To_api_AccExecSpec,
		Convert_api_AccExecSpec_To_v1_AccExecSpec,
		Convert_v1_AccSSHKey_To_api_AccSSHKey,
		Convert_api_AccSSHKey_To_v1_AccSSHKey,
		Convert_v1_AccSSHKeySpec_To_api_AccSSHKeySpec,
		Convert_api_AccSSHKeySpec_To_v1_AccSSHKeySpec,
		Convert_v1_AccServer_To_api_AccServer,
		Convert_api_AccServer_To_v1_AccServer,
		Convert_v1_AccServerDeploySS_To_api_AccServerDeploySS,
		Convert_api_AccServerDeploySS_To_v1_AccServerDeploySS,
		Convert_v1_AccServerList_To_api_AccServerList,
		Convert_api_AccServerList_To_v1_AccServerList,
		Convert_v1_AccServerSpec_To_api_AccServerSpec,
		Convert_api_AccServerSpec_To_v1_AccServerSpec,
		Convert_v1_Account_To_api_Account,
		Convert_api_Account_To_v1_Account,
		Convert_v1_AccountDetail_To_api_AccountDetail,
		Convert_api_AccountDetail_To_v1_AccountDetail,
		Convert_v1_AccountInfo_To_api_AccountInfo,
		Convert_api_AccountInfo_To_v1_AccountInfo,
		Convert_v1_AccountInfoSpec_To_api_AccountInfoSpec,
		Convert_api_AccountInfoSpec_To_v1_AccountInfoSpec,
		Convert_v1_AccountList_To_api_AccountList,
		Convert_api_AccountList_To_v1_AccountList,
		Convert_v1_AccountSpec_To_api_AccountSpec,
		Convert_api_AccountSpec_To_v1_AccountSpec,
		Convert_v1_ActiveAPINode_To_api_ActiveAPINode,
		Convert_api_ActiveAPINode_To_v1_ActiveAPINode,
		Convert_v1_ActiveAPINodeList_To_api_ActiveAPINodeList,
		Convert_api_ActiveAPINodeList_To_v1_ActiveAPINodeList,
		Convert_v1_ActiveAPINodeSpec_To_api_ActiveAPINodeSpec,
		Convert_api_ActiveAPINodeSpec_To_v1_ActiveAPINodeSpec,
		Convert_v1_BatchShadowss_To_api_BatchShadowss,
		Convert_api_BatchShadowss_To_v1_BatchShadowss,
		Convert_v1_BatchShadowssSpec_To_api_BatchShadowssSpec,
		Convert_api_BatchShadowssSpec_To_v1_BatchShadowssSpec,
		Convert_v1_BatchUsers_To_api_BatchUsers,
		Convert_api_BatchUsers_To_v1_BatchUsers,
		Convert_v1_BatchUsersSpec_To_api_BatchUsersSpec,
		Convert_api_BatchUsersSpec_To_v1_BatchUsersSpec,
		Convert_v1_BindingNodes_To_api_BindingNodes,
		Convert_api_BindingNodes_To_v1_BindingNodes,
		Convert_v1_DGAccountInfo_To_api_DGAccountInfo,
		Convert_api_DGAccountInfo_To_v1_DGAccountInfo,
		Convert_v1_DGServerInfo_To_api_DGServerInfo,
		Convert_api_DGServerInfo_To_v1_DGServerInfo,
		Convert_v1_Login_To_api_Login,
		Convert_api_Login_To_v1_Login,
		Convert_v1_LoginList_To_api_LoginList,
		Convert_api_LoginList_To_v1_LoginList,
		Convert_v1_LoginSpec_To_api_LoginSpec,
		Convert_api_LoginSpec_To_v1_LoginSpec,
		Convert_v1_Node_To_api_Node,
		Convert_api_Node_To_v1_Node,
		Convert_v1_NodeList_To_api_NodeList,
		Convert_api_NodeList_To_v1_NodeList,
		Convert_v1_NodeReferences_To_api_NodeReferences,
		Convert_api_NodeReferences_To_v1_NodeReferences,
		Convert_v1_NodeServer_To_api_NodeServer,
		Convert_api_NodeServer_To_v1_NodeServer,
		Convert_v1_NodeSpec_To_api_NodeSpec,
		Convert_api_NodeSpec_To_v1_NodeSpec,
		Convert_v1_NodeUser_To_api_NodeUser,
		Convert_api_NodeUser_To_v1_NodeUser,
		Convert_v1_NodeUserList_To_api_NodeUserList,
		Convert_api_NodeUserList_To_v1_NodeUserList,
		Convert_v1_NodeUserSpec_To_api_NodeUserSpec,
		Convert_api_NodeUserSpec_To_v1_NodeUserSpec,
		Convert_v1_SSHKey_To_api_SSHKey,
		Convert_api_SSHKey_To_v1_SSHKey,
		Convert_v1_TargetAccServer_To_api_TargetAccServer,
		Convert_api_TargetAccServer_To_v1_TargetAccServer,
		Convert_v1_User_To_api_User,
		Convert_api_User_To_v1_User,
		Convert_v1_UserInfo_To_api_UserInfo,
		Convert_api_UserInfo_To_v1_UserInfo,
		Convert_v1_UserList_To_api_UserList,
		Convert_api_UserList_To_v1_UserList,
		Convert_v1_UserPublicFile_To_api_UserPublicFile,
		Convert_api_UserPublicFile_To_v1_UserPublicFile,
		Convert_v1_UserPublicFileList_To_api_UserPublicFileList,
		Convert_api_UserPublicFileList_To_v1_UserPublicFileList,
		Convert_v1_UserPublicFileSpec_To_api_UserPublicFileSpec,
		Convert_api_UserPublicFileSpec_To_v1_UserPublicFileSpec,
		Convert_v1_UserReferences_To_api_UserReferences,
		Convert_api_UserReferences_To_v1_UserReferences,
		Convert_v1_UserService_To_api_UserService,
		Convert_api_UserService_To_v1_UserService,
		Convert_v1_UserServiceBindingNodes_To_api_UserServiceBindingNodes,
		Convert_api_UserServiceBindingNodes_To_v1_UserServiceBindingNodes,
		Convert_v1_UserServiceBindingNodesSpec_To_api_UserServiceBindingNodesSpec,
		Convert_api_UserServiceBindingNodesSpec_To_v1_UserServiceBindingNodesSpec,
		Convert_v1_UserServiceList_To_api_UserServiceList,
		Convert_api_UserServiceList_To_v1_UserServiceList,
		Convert_v1_UserServiceSpec_To_api_UserServiceSpec,
		Convert_api_UserServiceSpec_To_v1_UserServiceSpec,
		Convert_v1_UserSpec_To_api_UserSpec,
		Convert_api_UserSpec_To_v1_UserSpec,
		Convert_v1_UserToken_To_api_UserToken,
		Convert_api_UserToken_To_v1_UserToken,
		Convert_v1_UserTokenList_To_api_UserTokenList,
		Convert_api_UserTokenList_To_v1_UserTokenList,
		Convert_v1_UserTokenSpec_To_api_UserTokenSpec,
		Convert_api_UserTokenSpec_To_v1_UserTokenSpec,
		Convert_v1_VultrAccountInfo_To_api_VultrAccountInfo,
		Convert_api_VultrAccountInfo_To_v1_VultrAccountInfo,
		Convert_v1_VultrServerInfo_To_api_VultrServerInfo,
		Convert_api_VultrServerInfo_To_v1_VultrServerInfo,
	)
}

func autoConvert_v1_APIServer_To_api_APIServer(in *APIServer, out *api.APIServer, s conversion.Scope) error {
	// TODO: Inefficient conversion - can we improve it?
	if err := s.Convert(&in.ObjectMeta, &out.ObjectMeta, 0); err != nil {
		return err
	}
	if err := Convert_v1_APIServerSpec_To_api_APIServerSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

func Convert_v1_APIServer_To_api_APIServer(in *APIServer, out *api.APIServer, s conversion.Scope) error {
	return autoConvert_v1_APIServer_To_api_APIServer(in, out, s)
}

func autoConvert_api_APIServer_To_v1_APIServer(in *api.APIServer, out *APIServer, s conversion.Scope) error {
	// TODO: Inefficient conversion - can we improve it?
	if err := s.Convert(&in.ObjectMeta, &out.ObjectMeta, 0); err != nil {
		return err
	}
	if err := Convert_api_APIServerSpec_To_v1_APIServerSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

func Convert_api_APIServer_To_v1_APIServer(in *api.APIServer, out *APIServer, s conversion.Scope) error {
	return autoConvert_api_APIServer_To_v1_APIServer(in, out, s)
}

func autoConvert_v1_APIServerInfor_To_api_APIServerInfor(in *APIServerInfor, out *api.APIServerInfor, s conversion.Scope) error {
	out.ID = in.ID
	out.Name = in.Name
	out.Host = in.Host
	out.Port = in.Port
	out.Status = in.Status
	out.CreateTime = in.CreateTime
	return nil
}

func Convert_v1_APIServerInfor_To_api_APIServerInfor(in *APIServerInfor, out *api.APIServerInfor, s conversion.Scope) error {
	return autoConvert_v1_APIServerInfor_To_api_APIServerInfor(in, out, s)
}

func autoConvert_api_APIServerInfor_To_v1_APIServerInfor(in *api.APIServerInfor, out *APIServerInfor, s conversion.Scope) error {
	out.ID = in.ID
	out.Name = in.Name
	out.Host = in.Host
	out.Port = in.Port
	out.Status = in.Status
	out.CreateTime = in.CreateTime
	return nil
}

func Convert_api_APIServerInfor_To_v1_APIServerInfor(in *api.APIServerInfor, out *APIServerInfor, s conversion.Scope) error {
	return autoConvert_api_APIServerInfor_To_v1_APIServerInfor(in, out, s)
}

func autoConvert_v1_APIServerList_To_api_APIServerList(in *APIServerList, out *api.APIServerList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]api.APIServer, len(*in))
		for i := range *in {
			if err := Convert_v1_APIServer_To_api_APIServer(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_v1_APIServerList_To_api_APIServerList(in *APIServerList, out *api.APIServerList, s conversion.Scope) error {
	return autoConvert_v1_APIServerList_To_api_APIServerList(in, out, s)
}

func autoConvert_api_APIServerList_To_v1_APIServerList(in *api.APIServerList, out *APIServerList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]APIServer, len(*in))
		for i := range *in {
			if err := Convert_api_APIServer_To_v1_APIServer(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_api_APIServerList_To_v1_APIServerList(in *api.APIServerList, out *APIServerList, s conversion.Scope) error {
	return autoConvert_api_APIServerList_To_v1_APIServerList(in, out, s)
}

func autoConvert_v1_APIServerSpec_To_api_APIServerSpec(in *APIServerSpec, out *api.APIServerSpec, s conversion.Scope) error {
	if err := Convert_v1_APIServerInfor_To_api_APIServerInfor(&in.Server, &out.Server, s); err != nil {
		return err
	}
	out.HostList = in.HostList
	return nil
}

func Convert_v1_APIServerSpec_To_api_APIServerSpec(in *APIServerSpec, out *api.APIServerSpec, s conversion.Scope) error {
	return autoConvert_v1_APIServerSpec_To_api_APIServerSpec(in, out, s)
}

func autoConvert_api_APIServerSpec_To_v1_APIServerSpec(in *api.APIServerSpec, out *APIServerSpec, s conversion.Scope) error {
	if err := Convert_api_APIServerInfor_To_v1_APIServerInfor(&in.Server, &out.Server, s); err != nil {
		return err
	}
	out.HostList = in.HostList
	return nil
}

func Convert_api_APIServerSpec_To_v1_APIServerSpec(in *api.APIServerSpec, out *APIServerSpec, s conversion.Scope) error {
	return autoConvert_api_APIServerSpec_To_v1_APIServerSpec(in, out, s)
}

func autoConvert_v1_AccExec_To_api_AccExec(in *AccExec, out *api.AccExec, s conversion.Scope) error {
	// TODO: Inefficient conversion - can we improve it?
	if err := s.Convert(&in.ObjectMeta, &out.ObjectMeta, 0); err != nil {
		return err
	}
	if err := Convert_v1_AccExecSpec_To_api_AccExecSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

func Convert_v1_AccExec_To_api_AccExec(in *AccExec, out *api.AccExec, s conversion.Scope) error {
	return autoConvert_v1_AccExec_To_api_AccExec(in, out, s)
}

func autoConvert_api_AccExec_To_v1_AccExec(in *api.AccExec, out *AccExec, s conversion.Scope) error {
	// TODO: Inefficient conversion - can we improve it?
	if err := s.Convert(&in.ObjectMeta, &out.ObjectMeta, 0); err != nil {
		return err
	}
	if err := Convert_api_AccExecSpec_To_v1_AccExecSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

func Convert_api_AccExec_To_v1_AccExec(in *api.AccExec, out *AccExec, s conversion.Scope) error {
	return autoConvert_api_AccExec_To_v1_AccExec(in, out, s)
}

func autoConvert_v1_AccExecSpec_To_api_AccExecSpec(in *AccExecSpec, out *api.AccExecSpec, s conversion.Scope) error {
	out.SSHKey = in.SSHKey
	out.Command = in.Command
	out.ID = in.ID
	if err := Convert_v1_AccServerDeploySS_To_api_AccServerDeploySS(&in.Deploy, &out.Deploy, s); err != nil {
		return err
	}
	out.AccName = in.AccName
	return nil
}

func Convert_v1_AccExecSpec_To_api_AccExecSpec(in *AccExecSpec, out *api.AccExecSpec, s conversion.Scope) error {
	return autoConvert_v1_AccExecSpec_To_api_AccExecSpec(in, out, s)
}

func autoConvert_api_AccExecSpec_To_v1_AccExecSpec(in *api.AccExecSpec, out *AccExecSpec, s conversion.Scope) error {
	out.SSHKey = in.SSHKey
	out.Command = in.Command
	out.ID = in.ID
	if err := Convert_api_AccServerDeploySS_To_v1_AccServerDeploySS(&in.Deploy, &out.Deploy, s); err != nil {
		return err
	}
	out.AccName = in.AccName
	return nil
}

func Convert_api_AccExecSpec_To_v1_AccExecSpec(in *api.AccExecSpec, out *AccExecSpec, s conversion.Scope) error {
	return autoConvert_api_AccExecSpec_To_v1_AccExecSpec(in, out, s)
}

func autoConvert_v1_AccSSHKey_To_api_AccSSHKey(in *AccSSHKey, out *api.AccSSHKey, s conversion.Scope) error {
	// TODO: Inefficient conversion - can we improve it?
	if err := s.Convert(&in.ObjectMeta, &out.ObjectMeta, 0); err != nil {
		return err
	}
	if err := Convert_v1_AccSSHKeySpec_To_api_AccSSHKeySpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

func Convert_v1_AccSSHKey_To_api_AccSSHKey(in *AccSSHKey, out *api.AccSSHKey, s conversion.Scope) error {
	return autoConvert_v1_AccSSHKey_To_api_AccSSHKey(in, out, s)
}

func autoConvert_api_AccSSHKey_To_v1_AccSSHKey(in *api.AccSSHKey, out *AccSSHKey, s conversion.Scope) error {
	// TODO: Inefficient conversion - can we improve it?
	if err := s.Convert(&in.ObjectMeta, &out.ObjectMeta, 0); err != nil {
		return err
	}
	if err := Convert_api_AccSSHKeySpec_To_v1_AccSSHKeySpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

func Convert_api_AccSSHKey_To_v1_AccSSHKey(in *api.AccSSHKey, out *AccSSHKey, s conversion.Scope) error {
	return autoConvert_api_AccSSHKey_To_v1_AccSSHKey(in, out, s)
}

func autoConvert_v1_AccSSHKeySpec_To_api_AccSSHKeySpec(in *AccSSHKeySpec, out *api.AccSSHKeySpec, s conversion.Scope) error {
	if in.Keys != nil {
		in, out := &in.Keys, &out.Keys
		*out = make([]api.SSHKey, len(*in))
		for i := range *in {
			if err := Convert_v1_SSHKey_To_api_SSHKey(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Keys = nil
	}
	out.AccName = in.AccName
	return nil
}

func Convert_v1_AccSSHKeySpec_To_api_AccSSHKeySpec(in *AccSSHKeySpec, out *api.AccSSHKeySpec, s conversion.Scope) error {
	return autoConvert_v1_AccSSHKeySpec_To_api_AccSSHKeySpec(in, out, s)
}

func autoConvert_api_AccSSHKeySpec_To_v1_AccSSHKeySpec(in *api.AccSSHKeySpec, out *AccSSHKeySpec, s conversion.Scope) error {
	if in.Keys != nil {
		in, out := &in.Keys, &out.Keys
		*out = make([]SSHKey, len(*in))
		for i := range *in {
			if err := Convert_api_SSHKey_To_v1_SSHKey(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Keys = nil
	}
	out.AccName = in.AccName
	return nil
}

func Convert_api_AccSSHKeySpec_To_v1_AccSSHKeySpec(in *api.AccSSHKeySpec, out *AccSSHKeySpec, s conversion.Scope) error {
	return autoConvert_api_AccSSHKeySpec_To_v1_AccSSHKeySpec(in, out, s)
}

func autoConvert_v1_AccServer_To_api_AccServer(in *AccServer, out *api.AccServer, s conversion.Scope) error {
	// TODO: Inefficient conversion - can we improve it?
	if err := s.Convert(&in.ObjectMeta, &out.ObjectMeta, 0); err != nil {
		return err
	}
	if err := Convert_v1_AccServerSpec_To_api_AccServerSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

func Convert_v1_AccServer_To_api_AccServer(in *AccServer, out *api.AccServer, s conversion.Scope) error {
	return autoConvert_v1_AccServer_To_api_AccServer(in, out, s)
}

func autoConvert_api_AccServer_To_v1_AccServer(in *api.AccServer, out *AccServer, s conversion.Scope) error {
	// TODO: Inefficient conversion - can we improve it?
	if err := s.Convert(&in.ObjectMeta, &out.ObjectMeta, 0); err != nil {
		return err
	}
	if err := Convert_api_AccServerSpec_To_v1_AccServerSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

func Convert_api_AccServer_To_v1_AccServer(in *api.AccServer, out *AccServer, s conversion.Scope) error {
	return autoConvert_api_AccServer_To_v1_AccServer(in, out, s)
}

func autoConvert_v1_AccServerDeploySS_To_api_AccServerDeploySS(in *AccServerDeploySS, out *api.AccServerDeploySS, s conversion.Scope) error {
	out.HostList = in.HostList
	out.Attribute = in.Attribute
	return nil
}

func Convert_v1_AccServerDeploySS_To_api_AccServerDeploySS(in *AccServerDeploySS, out *api.AccServerDeploySS, s conversion.Scope) error {
	return autoConvert_v1_AccServerDeploySS_To_api_AccServerDeploySS(in, out, s)
}

func autoConvert_api_AccServerDeploySS_To_v1_AccServerDeploySS(in *api.AccServerDeploySS, out *AccServerDeploySS, s conversion.Scope) error {
	out.HostList = in.HostList
	out.Attribute = in.Attribute
	return nil
}

func Convert_api_AccServerDeploySS_To_v1_AccServerDeploySS(in *api.AccServerDeploySS, out *AccServerDeploySS, s conversion.Scope) error {
	return autoConvert_api_AccServerDeploySS_To_v1_AccServerDeploySS(in, out, s)
}

func autoConvert_v1_AccServerList_To_api_AccServerList(in *AccServerList, out *api.AccServerList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]api.AccServer, len(*in))
		for i := range *in {
			if err := Convert_v1_AccServer_To_api_AccServer(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_v1_AccServerList_To_api_AccServerList(in *AccServerList, out *api.AccServerList, s conversion.Scope) error {
	return autoConvert_v1_AccServerList_To_api_AccServerList(in, out, s)
}

func autoConvert_api_AccServerList_To_v1_AccServerList(in *api.AccServerList, out *AccServerList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]AccServer, len(*in))
		for i := range *in {
			if err := Convert_api_AccServer_To_v1_AccServer(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_api_AccServerList_To_v1_AccServerList(in *api.AccServerList, out *AccServerList, s conversion.Scope) error {
	return autoConvert_api_AccServerList_To_v1_AccServerList(in, out, s)
}

func autoConvert_v1_AccServerSpec_To_api_AccServerSpec(in *AccServerSpec, out *api.AccServerSpec, s conversion.Scope) error {
	out.ID = in.ID
	out.Size = in.Size
	out.Region = in.Region
	out.Image = in.Image
	out.SSHKeyID = in.SSHKeyID
	out.Name = in.Name
	out.AccName = in.AccName
	if err := Convert_v1_DGServerInfo_To_api_DGServerInfo(&in.DigitalOcean, &out.DigitalOcean, s); err != nil {
		return err
	}
	if err := Convert_v1_VultrServerInfo_To_api_VultrServerInfo(&in.Vultr, &out.Vultr, s); err != nil {
		return err
	}
	return nil
}

func Convert_v1_AccServerSpec_To_api_AccServerSpec(in *AccServerSpec, out *api.AccServerSpec, s conversion.Scope) error {
	return autoConvert_v1_AccServerSpec_To_api_AccServerSpec(in, out, s)
}

func autoConvert_api_AccServerSpec_To_v1_AccServerSpec(in *api.AccServerSpec, out *AccServerSpec, s conversion.Scope) error {
	out.ID = in.ID
	out.Size = in.Size
	out.Region = in.Region
	out.Image = in.Image
	out.SSHKeyID = in.SSHKeyID
	out.Name = in.Name
	out.AccName = in.AccName
	if err := Convert_api_DGServerInfo_To_v1_DGServerInfo(&in.DigitalOcean, &out.DigitalOcean, s); err != nil {
		return err
	}
	if err := Convert_api_VultrServerInfo_To_v1_VultrServerInfo(&in.Vultr, &out.Vultr, s); err != nil {
		return err
	}
	return nil
}

func Convert_api_AccServerSpec_To_v1_AccServerSpec(in *api.AccServerSpec, out *AccServerSpec, s conversion.Scope) error {
	return autoConvert_api_AccServerSpec_To_v1_AccServerSpec(in, out, s)
}

func autoConvert_v1_Account_To_api_Account(in *Account, out *api.Account, s conversion.Scope) error {
	// TODO: Inefficient conversion - can we improve it?
	if err := s.Convert(&in.ObjectMeta, &out.ObjectMeta, 0); err != nil {
		return err
	}
	if err := Convert_v1_AccountSpec_To_api_AccountSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

func Convert_v1_Account_To_api_Account(in *Account, out *api.Account, s conversion.Scope) error {
	return autoConvert_v1_Account_To_api_Account(in, out, s)
}

func autoConvert_api_Account_To_v1_Account(in *api.Account, out *Account, s conversion.Scope) error {
	// TODO: Inefficient conversion - can we improve it?
	if err := s.Convert(&in.ObjectMeta, &out.ObjectMeta, 0); err != nil {
		return err
	}
	if err := Convert_api_AccountSpec_To_v1_AccountSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

func Convert_api_Account_To_v1_Account(in *api.Account, out *Account, s conversion.Scope) error {
	return autoConvert_api_Account_To_v1_Account(in, out, s)
}

func autoConvert_v1_AccountDetail_To_api_AccountDetail(in *AccountDetail, out *api.AccountDetail, s conversion.Scope) error {
	out.ID = in.ID
	out.Name = in.Name
	out.Operators = in.Operators
	out.Key = in.Key
	out.Descryption = in.Descryption
	out.CreditCeilings = in.CreditCeilings
	out.Lables = in.Lables
	out.CreateTime = in.CreateTime
	out.ExpireTime = in.ExpireTime
	return nil
}

func Convert_v1_AccountDetail_To_api_AccountDetail(in *AccountDetail, out *api.AccountDetail, s conversion.Scope) error {
	return autoConvert_v1_AccountDetail_To_api_AccountDetail(in, out, s)
}

func autoConvert_api_AccountDetail_To_v1_AccountDetail(in *api.AccountDetail, out *AccountDetail, s conversion.Scope) error {
	out.ID = in.ID
	out.Name = in.Name
	out.Operators = in.Operators
	out.Key = in.Key
	out.Descryption = in.Descryption
	out.CreditCeilings = in.CreditCeilings
	out.Lables = in.Lables
	out.CreateTime = in.CreateTime
	out.ExpireTime = in.ExpireTime
	return nil
}

func Convert_api_AccountDetail_To_v1_AccountDetail(in *api.AccountDetail, out *AccountDetail, s conversion.Scope) error {
	return autoConvert_api_AccountDetail_To_v1_AccountDetail(in, out, s)
}

func autoConvert_v1_AccountInfo_To_api_AccountInfo(in *AccountInfo, out *api.AccountInfo, s conversion.Scope) error {
	// TODO: Inefficient conversion - can we improve it?
	if err := s.Convert(&in.ObjectMeta, &out.ObjectMeta, 0); err != nil {
		return err
	}
	if err := Convert_v1_AccountInfoSpec_To_api_AccountInfoSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

func Convert_v1_AccountInfo_To_api_AccountInfo(in *AccountInfo, out *api.AccountInfo, s conversion.Scope) error {
	return autoConvert_v1_AccountInfo_To_api_AccountInfo(in, out, s)
}

func autoConvert_api_AccountInfo_To_v1_AccountInfo(in *api.AccountInfo, out *AccountInfo, s conversion.Scope) error {
	// TODO: Inefficient conversion - can we improve it?
	if err := s.Convert(&in.ObjectMeta, &out.ObjectMeta, 0); err != nil {
		return err
	}
	if err := Convert_api_AccountInfoSpec_To_v1_AccountInfoSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

func Convert_api_AccountInfo_To_v1_AccountInfo(in *api.AccountInfo, out *AccountInfo, s conversion.Scope) error {
	return autoConvert_api_AccountInfo_To_v1_AccountInfo(in, out, s)
}

func autoConvert_v1_AccountInfoSpec_To_api_AccountInfoSpec(in *AccountInfoSpec, out *api.AccountInfoSpec, s conversion.Scope) error {
	if err := Convert_v1_DGAccountInfo_To_api_DGAccountInfo(&in.DigitalOcean, &out.DigitalOcean, s); err != nil {
		return err
	}
	if err := Convert_v1_VultrAccountInfo_To_api_VultrAccountInfo(&in.Vultr, &out.Vultr, s); err != nil {
		return err
	}
	out.AccName = in.AccName
	return nil
}

func Convert_v1_AccountInfoSpec_To_api_AccountInfoSpec(in *AccountInfoSpec, out *api.AccountInfoSpec, s conversion.Scope) error {
	return autoConvert_v1_AccountInfoSpec_To_api_AccountInfoSpec(in, out, s)
}

func autoConvert_api_AccountInfoSpec_To_v1_AccountInfoSpec(in *api.AccountInfoSpec, out *AccountInfoSpec, s conversion.Scope) error {
	if err := Convert_api_DGAccountInfo_To_v1_DGAccountInfo(&in.DigitalOcean, &out.DigitalOcean, s); err != nil {
		return err
	}
	if err := Convert_api_VultrAccountInfo_To_v1_VultrAccountInfo(&in.Vultr, &out.Vultr, s); err != nil {
		return err
	}
	out.AccName = in.AccName
	return nil
}

func Convert_api_AccountInfoSpec_To_v1_AccountInfoSpec(in *api.AccountInfoSpec, out *AccountInfoSpec, s conversion.Scope) error {
	return autoConvert_api_AccountInfoSpec_To_v1_AccountInfoSpec(in, out, s)
}

func autoConvert_v1_AccountList_To_api_AccountList(in *AccountList, out *api.AccountList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]api.Account, len(*in))
		for i := range *in {
			if err := Convert_v1_Account_To_api_Account(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_v1_AccountList_To_api_AccountList(in *AccountList, out *api.AccountList, s conversion.Scope) error {
	return autoConvert_v1_AccountList_To_api_AccountList(in, out, s)
}

func autoConvert_api_AccountList_To_v1_AccountList(in *api.AccountList, out *AccountList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Account, len(*in))
		for i := range *in {
			if err := Convert_api_Account_To_v1_Account(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_api_AccountList_To_v1_AccountList(in *api.AccountList, out *AccountList, s conversion.Scope) error {
	return autoConvert_api_AccountList_To_v1_AccountList(in, out, s)
}

func autoConvert_v1_AccountSpec_To_api_AccountSpec(in *AccountSpec, out *api.AccountSpec, s conversion.Scope) error {
	if err := Convert_v1_AccountDetail_To_api_AccountDetail(&in.AccDetail, &out.AccDetail, s); err != nil {
		return err
	}
	return nil
}

func Convert_v1_AccountSpec_To_api_AccountSpec(in *AccountSpec, out *api.AccountSpec, s conversion.Scope) error {
	return autoConvert_v1_AccountSpec_To_api_AccountSpec(in, out, s)
}

func autoConvert_api_AccountSpec_To_v1_AccountSpec(in *api.AccountSpec, out *AccountSpec, s conversion.Scope) error {
	if err := Convert_api_AccountDetail_To_v1_AccountDetail(&in.AccDetail, &out.AccDetail, s); err != nil {
		return err
	}
	return nil
}

func Convert_api_AccountSpec_To_v1_AccountSpec(in *api.AccountSpec, out *AccountSpec, s conversion.Scope) error {
	return autoConvert_api_AccountSpec_To_v1_AccountSpec(in, out, s)
}

func autoConvert_v1_ActiveAPINode_To_api_ActiveAPINode(in *ActiveAPINode, out *api.ActiveAPINode, s conversion.Scope) error {
	// TODO: Inefficient conversion - can we improve it?
	if err := s.Convert(&in.ObjectMeta, &out.ObjectMeta, 0); err != nil {
		return err
	}
	if err := Convert_v1_ActiveAPINodeSpec_To_api_ActiveAPINodeSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

func Convert_v1_ActiveAPINode_To_api_ActiveAPINode(in *ActiveAPINode, out *api.ActiveAPINode, s conversion.Scope) error {
	return autoConvert_v1_ActiveAPINode_To_api_ActiveAPINode(in, out, s)
}

func autoConvert_api_ActiveAPINode_To_v1_ActiveAPINode(in *api.ActiveAPINode, out *ActiveAPINode, s conversion.Scope) error {
	// TODO: Inefficient conversion - can we improve it?
	if err := s.Convert(&in.ObjectMeta, &out.ObjectMeta, 0); err != nil {
		return err
	}
	if err := Convert_api_ActiveAPINodeSpec_To_v1_ActiveAPINodeSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

func Convert_api_ActiveAPINode_To_v1_ActiveAPINode(in *api.ActiveAPINode, out *ActiveAPINode, s conversion.Scope) error {
	return autoConvert_api_ActiveAPINode_To_v1_ActiveAPINode(in, out, s)
}

func autoConvert_v1_ActiveAPINodeList_To_api_ActiveAPINodeList(in *ActiveAPINodeList, out *api.ActiveAPINodeList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]api.ActiveAPINode, len(*in))
		for i := range *in {
			if err := Convert_v1_ActiveAPINode_To_api_ActiveAPINode(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	out.EncryptData = in.EncryptData
	return nil
}

func Convert_v1_ActiveAPINodeList_To_api_ActiveAPINodeList(in *ActiveAPINodeList, out *api.ActiveAPINodeList, s conversion.Scope) error {
	return autoConvert_v1_ActiveAPINodeList_To_api_ActiveAPINodeList(in, out, s)
}

func autoConvert_api_ActiveAPINodeList_To_v1_ActiveAPINodeList(in *api.ActiveAPINodeList, out *ActiveAPINodeList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ActiveAPINode, len(*in))
		for i := range *in {
			if err := Convert_api_ActiveAPINode_To_v1_ActiveAPINode(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	out.EncryptData = in.EncryptData
	return nil
}

func Convert_api_ActiveAPINodeList_To_v1_ActiveAPINodeList(in *api.ActiveAPINodeList, out *ActiveAPINodeList, s conversion.Scope) error {
	return autoConvert_api_ActiveAPINodeList_To_v1_ActiveAPINodeList(in, out, s)
}

func autoConvert_v1_ActiveAPINodeSpec_To_api_ActiveAPINodeSpec(in *ActiveAPINodeSpec, out *api.ActiveAPINodeSpec, s conversion.Scope) error {
	out.Host = in.Host
	out.Port = in.Port
	out.Password = in.Password
	out.Method = in.Method
	return nil
}

func Convert_v1_ActiveAPINodeSpec_To_api_ActiveAPINodeSpec(in *ActiveAPINodeSpec, out *api.ActiveAPINodeSpec, s conversion.Scope) error {
	return autoConvert_v1_ActiveAPINodeSpec_To_api_ActiveAPINodeSpec(in, out, s)
}

func autoConvert_api_ActiveAPINodeSpec_To_v1_ActiveAPINodeSpec(in *api.ActiveAPINodeSpec, out *ActiveAPINodeSpec, s conversion.Scope) error {
	out.Host = in.Host
	out.Port = in.Port
	out.Password = in.Password
	out.Method = in.Method
	return nil
}

func Convert_api_ActiveAPINodeSpec_To_v1_ActiveAPINodeSpec(in *api.ActiveAPINodeSpec, out *ActiveAPINodeSpec, s conversion.Scope) error {
	return autoConvert_api_ActiveAPINodeSpec_To_v1_ActiveAPINodeSpec(in, out, s)
}

func autoConvert_v1_BatchShadowss_To_api_BatchShadowss(in *BatchShadowss, out *api.BatchShadowss, s conversion.Scope) error {
	// TODO: Inefficient conversion - can we improve it?
	if err := s.Convert(&in.ObjectMeta, &out.ObjectMeta, 0); err != nil {
		return err
	}
	if err := Convert_v1_BatchShadowssSpec_To_api_BatchShadowssSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

func Convert_v1_BatchShadowss_To_api_BatchShadowss(in *BatchShadowss, out *api.BatchShadowss, s conversion.Scope) error {
	return autoConvert_v1_BatchShadowss_To_api_BatchShadowss(in, out, s)
}

func autoConvert_api_BatchShadowss_To_v1_BatchShadowss(in *api.BatchShadowss, out *BatchShadowss, s conversion.Scope) error {
	// TODO: Inefficient conversion - can we improve it?
	if err := s.Convert(&in.ObjectMeta, &out.ObjectMeta, 0); err != nil {
		return err
	}
	if err := Convert_api_BatchShadowssSpec_To_v1_BatchShadowssSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

func Convert_api_BatchShadowss_To_v1_BatchShadowss(in *api.BatchShadowss, out *BatchShadowss, s conversion.Scope) error {
	return autoConvert_api_BatchShadowss_To_v1_BatchShadowss(in, out, s)
}

func autoConvert_v1_BatchShadowssSpec_To_api_BatchShadowssSpec(in *BatchShadowssSpec, out *api.BatchShadowssSpec, s conversion.Scope) error {
	if in.Target != nil {
		in, out := &in.Target, &out.Target
		*out = make([]api.TargetAccServer, len(*in))
		for i := range *in {
			if err := Convert_v1_TargetAccServer_To_api_TargetAccServer(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Target = nil
	}
	out.SchedulingTime = in.SchedulingTime
	out.Upgrade = in.Upgrade
	return nil
}

func Convert_v1_BatchShadowssSpec_To_api_BatchShadowssSpec(in *BatchShadowssSpec, out *api.BatchShadowssSpec, s conversion.Scope) error {
	return autoConvert_v1_BatchShadowssSpec_To_api_BatchShadowssSpec(in, out, s)
}

func autoConvert_api_BatchShadowssSpec_To_v1_BatchShadowssSpec(in *api.BatchShadowssSpec, out *BatchShadowssSpec, s conversion.Scope) error {
	if in.Target != nil {
		in, out := &in.Target, &out.Target
		*out = make([]TargetAccServer, len(*in))
		for i := range *in {
			if err := Convert_api_TargetAccServer_To_v1_TargetAccServer(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Target = nil
	}
	out.SchedulingTime = in.SchedulingTime
	out.Upgrade = in.Upgrade
	return nil
}

func Convert_api_BatchShadowssSpec_To_v1_BatchShadowssSpec(in *api.BatchShadowssSpec, out *BatchShadowssSpec, s conversion.Scope) error {
	return autoConvert_api_BatchShadowssSpec_To_v1_BatchShadowssSpec(in, out, s)
}

func autoConvert_v1_BatchUsers_To_api_BatchUsers(in *BatchUsers, out *api.BatchUsers, s conversion.Scope) error {
	// TODO: Inefficient conversion - can we improve it?
	if err := s.Convert(&in.ObjectMeta, &out.ObjectMeta, 0); err != nil {
		return err
	}
	if err := Convert_v1_BatchUsersSpec_To_api_BatchUsersSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

func Convert_v1_BatchUsers_To_api_BatchUsers(in *BatchUsers, out *api.BatchUsers, s conversion.Scope) error {
	return autoConvert_v1_BatchUsers_To_api_BatchUsers(in, out, s)
}

func autoConvert_api_BatchUsers_To_v1_BatchUsers(in *api.BatchUsers, out *BatchUsers, s conversion.Scope) error {
	// TODO: Inefficient conversion - can we improve it?
	if err := s.Convert(&in.ObjectMeta, &out.ObjectMeta, 0); err != nil {
		return err
	}
	if err := Convert_api_BatchUsersSpec_To_v1_BatchUsersSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

func Convert_api_BatchUsers_To_v1_BatchUsers(in *api.BatchUsers, out *BatchUsers, s conversion.Scope) error {
	return autoConvert_api_BatchUsers_To_v1_BatchUsers(in, out, s)
}

func autoConvert_v1_BatchUsersSpec_To_api_BatchUsersSpec(in *BatchUsersSpec, out *api.BatchUsersSpec, s conversion.Scope) error {
	out.TargetUser = in.TargetUser
	out.SchedulingTime = in.SchedulingTime
	out.Resume = in.Resume
	return nil
}

func Convert_v1_BatchUsersSpec_To_api_BatchUsersSpec(in *BatchUsersSpec, out *api.BatchUsersSpec, s conversion.Scope) error {
	return autoConvert_v1_BatchUsersSpec_To_api_BatchUsersSpec(in, out, s)
}

func autoConvert_api_BatchUsersSpec_To_v1_BatchUsersSpec(in *api.BatchUsersSpec, out *BatchUsersSpec, s conversion.Scope) error {
	out.TargetUser = in.TargetUser
	out.SchedulingTime = in.SchedulingTime
	out.Resume = in.Resume
	return nil
}

func Convert_api_BatchUsersSpec_To_v1_BatchUsersSpec(in *api.BatchUsersSpec, out *BatchUsersSpec, s conversion.Scope) error {
	return autoConvert_api_BatchUsersSpec_To_v1_BatchUsersSpec(in, out, s)
}

func autoConvert_v1_BindingNodes_To_api_BindingNodes(in *BindingNodes, out *api.BindingNodes, s conversion.Scope) error {
	if in.Nodes != nil {
		in, out := &in.Nodes, &out.Nodes
		*out = make(map[string]api.NodeReferences, len(*in))
		for key, val := range *in {
			newVal := new(api.NodeReferences)
			if err := Convert_v1_NodeReferences_To_api_NodeReferences(&val, newVal, s); err != nil {
				return err
			}
			(*out)[key] = *newVal
		}
	} else {
		out.Nodes = nil
	}
	out.NodeCnt = in.NodeCnt
	out.Status = in.Status
	return nil
}

func Convert_v1_BindingNodes_To_api_BindingNodes(in *BindingNodes, out *api.BindingNodes, s conversion.Scope) error {
	return autoConvert_v1_BindingNodes_To_api_BindingNodes(in, out, s)
}

func autoConvert_api_BindingNodes_To_v1_BindingNodes(in *api.BindingNodes, out *BindingNodes, s conversion.Scope) error {
	if in.Nodes != nil {
		in, out := &in.Nodes, &out.Nodes
		*out = make(map[string]NodeReferences, len(*in))
		for key, val := range *in {
			newVal := new(NodeReferences)
			if err := Convert_api_NodeReferences_To_v1_NodeReferences(&val, newVal, s); err != nil {
				return err
			}
			(*out)[key] = *newVal
		}
	} else {
		out.Nodes = nil
	}
	out.NodeCnt = in.NodeCnt
	out.Status = in.Status
	return nil
}

func Convert_api_BindingNodes_To_v1_BindingNodes(in *api.BindingNodes, out *BindingNodes, s conversion.Scope) error {
	return autoConvert_api_BindingNodes_To_v1_BindingNodes(in, out, s)
}

func autoConvert_v1_DGAccountInfo_To_api_DGAccountInfo(in *DGAccountInfo, out *api.DGAccountInfo, s conversion.Scope) error {
	out.DropletLimit = in.DropletLimit
	out.Email = in.Email
	out.UUID = in.UUID
	out.EmailVerified = in.EmailVerified
	return nil
}

func Convert_v1_DGAccountInfo_To_api_DGAccountInfo(in *DGAccountInfo, out *api.DGAccountInfo, s conversion.Scope) error {
	return autoConvert_v1_DGAccountInfo_To_api_DGAccountInfo(in, out, s)
}

func autoConvert_api_DGAccountInfo_To_v1_DGAccountInfo(in *api.DGAccountInfo, out *DGAccountInfo, s conversion.Scope) error {
	out.DropletLimit = in.DropletLimit
	out.Email = in.Email
	out.UUID = in.UUID
	out.EmailVerified = in.EmailVerified
	return nil
}

func Convert_api_DGAccountInfo_To_v1_DGAccountInfo(in *api.DGAccountInfo, out *DGAccountInfo, s conversion.Scope) error {
	return autoConvert_api_DGAccountInfo_To_v1_DGAccountInfo(in, out, s)
}

func autoConvert_v1_DGServerInfo_To_api_DGServerInfo(in *DGServerInfo, out *api.DGServerInfo, s conversion.Scope) error {
	out.Location = in.Location
	out.Name = in.Name
	out.Status = in.Status
	out.CreatedTime = in.CreatedTime
	out.IPV4Addr = in.IPV4Addr
	out.IPV4NetMask = in.IPV4NetMask
	out.IPV4Gateway = in.IPV4Gateway
	out.PriceMonthly = in.PriceMonthly
	out.PriceHourly = in.PriceHourly
	return nil
}

func Convert_v1_DGServerInfo_To_api_DGServerInfo(in *DGServerInfo, out *api.DGServerInfo, s conversion.Scope) error {
	return autoConvert_v1_DGServerInfo_To_api_DGServerInfo(in, out, s)
}

func autoConvert_api_DGServerInfo_To_v1_DGServerInfo(in *api.DGServerInfo, out *DGServerInfo, s conversion.Scope) error {
	out.Location = in.Location
	out.Name = in.Name
	out.Status = in.Status
	out.CreatedTime = in.CreatedTime
	out.IPV4Addr = in.IPV4Addr
	out.IPV4NetMask = in.IPV4NetMask
	out.IPV4Gateway = in.IPV4Gateway
	out.PriceMonthly = in.PriceMonthly
	out.PriceHourly = in.PriceHourly
	return nil
}

func Convert_api_DGServerInfo_To_v1_DGServerInfo(in *api.DGServerInfo, out *DGServerInfo, s conversion.Scope) error {
	return autoConvert_api_DGServerInfo_To_v1_DGServerInfo(in, out, s)
}

func autoConvert_v1_Login_To_api_Login(in *Login, out *api.Login, s conversion.Scope) error {
	// TODO: Inefficient conversion - can we improve it?
	if err := s.Convert(&in.ObjectMeta, &out.ObjectMeta, 0); err != nil {
		return err
	}
	if err := Convert_v1_LoginSpec_To_api_LoginSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

func Convert_v1_Login_To_api_Login(in *Login, out *api.Login, s conversion.Scope) error {
	return autoConvert_v1_Login_To_api_Login(in, out, s)
}

func autoConvert_api_Login_To_v1_Login(in *api.Login, out *Login, s conversion.Scope) error {
	// TODO: Inefficient conversion - can we improve it?
	if err := s.Convert(&in.ObjectMeta, &out.ObjectMeta, 0); err != nil {
		return err
	}
	if err := Convert_api_LoginSpec_To_v1_LoginSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

func Convert_api_Login_To_v1_Login(in *api.Login, out *Login, s conversion.Scope) error {
	return autoConvert_api_Login_To_v1_Login(in, out, s)
}

func autoConvert_v1_LoginList_To_api_LoginList(in *LoginList, out *api.LoginList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]api.Login, len(*in))
		for i := range *in {
			if err := Convert_v1_Login_To_api_Login(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_v1_LoginList_To_api_LoginList(in *LoginList, out *api.LoginList, s conversion.Scope) error {
	return autoConvert_v1_LoginList_To_api_LoginList(in, out, s)
}

func autoConvert_api_LoginList_To_v1_LoginList(in *api.LoginList, out *LoginList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Login, len(*in))
		for i := range *in {
			if err := Convert_api_Login_To_v1_Login(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_api_LoginList_To_v1_LoginList(in *api.LoginList, out *LoginList, s conversion.Scope) error {
	return autoConvert_api_LoginList_To_v1_LoginList(in, out, s)
}

func autoConvert_v1_LoginSpec_To_api_LoginSpec(in *LoginSpec, out *api.LoginSpec, s conversion.Scope) error {
	out.AuthName = in.AuthName
	out.Auth = in.Auth
	out.AuthID = in.AuthID
	out.Token = in.Token
	return nil
}

func Convert_v1_LoginSpec_To_api_LoginSpec(in *LoginSpec, out *api.LoginSpec, s conversion.Scope) error {
	return autoConvert_v1_LoginSpec_To_api_LoginSpec(in, out, s)
}

func autoConvert_api_LoginSpec_To_v1_LoginSpec(in *api.LoginSpec, out *LoginSpec, s conversion.Scope) error {
	out.AuthName = in.AuthName
	out.Auth = in.Auth
	out.AuthID = in.AuthID
	out.Token = in.Token
	return nil
}

func Convert_api_LoginSpec_To_v1_LoginSpec(in *api.LoginSpec, out *LoginSpec, s conversion.Scope) error {
	return autoConvert_api_LoginSpec_To_v1_LoginSpec(in, out, s)
}

func autoConvert_v1_Node_To_api_Node(in *Node, out *api.Node, s conversion.Scope) error {
	// TODO: Inefficient conversion - can we improve it?
	if err := s.Convert(&in.ObjectMeta, &out.ObjectMeta, 0); err != nil {
		return err
	}
	if err := Convert_v1_NodeSpec_To_api_NodeSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

func Convert_v1_Node_To_api_Node(in *Node, out *api.Node, s conversion.Scope) error {
	return autoConvert_v1_Node_To_api_Node(in, out, s)
}

func autoConvert_api_Node_To_v1_Node(in *api.Node, out *Node, s conversion.Scope) error {
	// TODO: Inefficient conversion - can we improve it?
	if err := s.Convert(&in.ObjectMeta, &out.ObjectMeta, 0); err != nil {
		return err
	}
	if err := Convert_api_NodeSpec_To_v1_NodeSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

func Convert_api_Node_To_v1_Node(in *api.Node, out *Node, s conversion.Scope) error {
	return autoConvert_api_Node_To_v1_Node(in, out, s)
}

func autoConvert_v1_NodeList_To_api_NodeList(in *NodeList, out *api.NodeList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]api.Node, len(*in))
		for i := range *in {
			if err := Convert_v1_Node_To_api_Node(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_v1_NodeList_To_api_NodeList(in *NodeList, out *api.NodeList, s conversion.Scope) error {
	return autoConvert_v1_NodeList_To_api_NodeList(in, out, s)
}

func autoConvert_api_NodeList_To_v1_NodeList(in *api.NodeList, out *NodeList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Node, len(*in))
		for i := range *in {
			if err := Convert_api_Node_To_v1_Node(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_api_NodeList_To_v1_NodeList(in *api.NodeList, out *NodeList, s conversion.Scope) error {
	return autoConvert_api_NodeList_To_v1_NodeList(in, out, s)
}

func autoConvert_v1_NodeReferences_To_api_NodeReferences(in *NodeReferences, out *api.NodeReferences, s conversion.Scope) error {
	out.Host = in.Host
	if err := Convert_v1_UserReferences_To_api_UserReferences(&in.User, &out.User, s); err != nil {
		return err
	}
	return nil
}

func Convert_v1_NodeReferences_To_api_NodeReferences(in *NodeReferences, out *api.NodeReferences, s conversion.Scope) error {
	return autoConvert_v1_NodeReferences_To_api_NodeReferences(in, out, s)
}

func autoConvert_api_NodeReferences_To_v1_NodeReferences(in *api.NodeReferences, out *NodeReferences, s conversion.Scope) error {
	out.Host = in.Host
	if err := Convert_api_UserReferences_To_v1_UserReferences(&in.User, &out.User, s); err != nil {
		return err
	}
	return nil
}

func Convert_api_NodeReferences_To_v1_NodeReferences(in *api.NodeReferences, out *NodeReferences, s conversion.Scope) error {
	return autoConvert_api_NodeReferences_To_v1_NodeReferences(in, out, s)
}

func autoConvert_v1_NodeServer_To_api_NodeServer(in *NodeServer, out *api.NodeServer, s conversion.Scope) error {
	out.ID = in.ID
	out.Name = in.Name
	out.EnableOTA = in.EnableOTA
	out.Host = in.Host
	out.Method = in.Method
	out.Status = in.Status
	out.Location = in.Location
	out.AccServerID = in.AccServerID
	out.AccServerName = in.AccServerName
	out.Description = in.Description
	out.TrafficLimit = in.TrafficLimit
	out.Upload = in.Upload
	out.Download = in.Download
	out.TrafficRate = in.TrafficRate
	out.TotalUploadTraffic = in.TotalUploadTraffic
	out.TotalDownloadTraffic = in.TotalDownloadTraffic
	out.CustomMethod = in.CustomMethod
	return nil
}

func Convert_v1_NodeServer_To_api_NodeServer(in *NodeServer, out *api.NodeServer, s conversion.Scope) error {
	return autoConvert_v1_NodeServer_To_api_NodeServer(in, out, s)
}

func autoConvert_api_NodeServer_To_v1_NodeServer(in *api.NodeServer, out *NodeServer, s conversion.Scope) error {
	out.ID = in.ID
	out.Name = in.Name
	out.EnableOTA = in.EnableOTA
	out.Host = in.Host
	out.Method = in.Method
	out.Status = in.Status
	out.Location = in.Location
	out.AccServerID = in.AccServerID
	out.AccServerName = in.AccServerName
	out.Description = in.Description
	out.TrafficLimit = in.TrafficLimit
	out.Upload = in.Upload
	out.Download = in.Download
	out.TrafficRate = in.TrafficRate
	out.TotalUploadTraffic = in.TotalUploadTraffic
	out.TotalDownloadTraffic = in.TotalDownloadTraffic
	out.CustomMethod = in.CustomMethod
	return nil
}

func Convert_api_NodeServer_To_v1_NodeServer(in *api.NodeServer, out *NodeServer, s conversion.Scope) error {
	return autoConvert_api_NodeServer_To_v1_NodeServer(in, out, s)
}

func autoConvert_v1_NodeSpec_To_api_NodeSpec(in *NodeSpec, out *api.NodeSpec, s conversion.Scope) error {
	if err := Convert_v1_NodeServer_To_api_NodeServer(&in.Server, &out.Server, s); err != nil {
		return err
	}
	if in.Users != nil {
		in, out := &in.Users, &out.Users
		*out = make(map[string]api.NodeUserSpec, len(*in))
		for key, val := range *in {
			newVal := new(api.NodeUserSpec)
			if err := Convert_v1_NodeUserSpec_To_api_NodeUserSpec(&val, newVal, s); err != nil {
				return err
			}
			(*out)[key] = *newVal
		}
	} else {
		out.Users = nil
	}
	return nil
}

func Convert_v1_NodeSpec_To_api_NodeSpec(in *NodeSpec, out *api.NodeSpec, s conversion.Scope) error {
	return autoConvert_v1_NodeSpec_To_api_NodeSpec(in, out, s)
}

func autoConvert_api_NodeSpec_To_v1_NodeSpec(in *api.NodeSpec, out *NodeSpec, s conversion.Scope) error {
	if err := Convert_api_NodeServer_To_v1_NodeServer(&in.Server, &out.Server, s); err != nil {
		return err
	}
	if in.Users != nil {
		in, out := &in.Users, &out.Users
		*out = make(map[string]NodeUserSpec, len(*in))
		for key, val := range *in {
			newVal := new(NodeUserSpec)
			if err := Convert_api_NodeUserSpec_To_v1_NodeUserSpec(&val, newVal, s); err != nil {
				return err
			}
			(*out)[key] = *newVal
		}
	} else {
		out.Users = nil
	}
	return nil
}

func Convert_api_NodeSpec_To_v1_NodeSpec(in *api.NodeSpec, out *NodeSpec, s conversion.Scope) error {
	return autoConvert_api_NodeSpec_To_v1_NodeSpec(in, out, s)
}

func autoConvert_v1_NodeUser_To_api_NodeUser(in *NodeUser, out *api.NodeUser, s conversion.Scope) error {
	// TODO: Inefficient conversion - can we improve it?
	if err := s.Convert(&in.ObjectMeta, &out.ObjectMeta, 0); err != nil {
		return err
	}
	if err := Convert_v1_NodeUserSpec_To_api_NodeUserSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

func Convert_v1_NodeUser_To_api_NodeUser(in *NodeUser, out *api.NodeUser, s conversion.Scope) error {
	return autoConvert_v1_NodeUser_To_api_NodeUser(in, out, s)
}

func autoConvert_api_NodeUser_To_v1_NodeUser(in *api.NodeUser, out *NodeUser, s conversion.Scope) error {
	// TODO: Inefficient conversion - can we improve it?
	if err := s.Convert(&in.ObjectMeta, &out.ObjectMeta, 0); err != nil {
		return err
	}
	if err := Convert_api_NodeUserSpec_To_v1_NodeUserSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

func Convert_api_NodeUser_To_v1_NodeUser(in *api.NodeUser, out *NodeUser, s conversion.Scope) error {
	return autoConvert_api_NodeUser_To_v1_NodeUser(in, out, s)
}

func autoConvert_v1_NodeUserList_To_api_NodeUserList(in *NodeUserList, out *api.NodeUserList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]api.NodeUser, len(*in))
		for i := range *in {
			if err := Convert_v1_NodeUser_To_api_NodeUser(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_v1_NodeUserList_To_api_NodeUserList(in *NodeUserList, out *api.NodeUserList, s conversion.Scope) error {
	return autoConvert_v1_NodeUserList_To_api_NodeUserList(in, out, s)
}

func autoConvert_api_NodeUserList_To_v1_NodeUserList(in *api.NodeUserList, out *NodeUserList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]NodeUser, len(*in))
		for i := range *in {
			if err := Convert_api_NodeUser_To_v1_NodeUser(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_api_NodeUserList_To_v1_NodeUserList(in *api.NodeUserList, out *NodeUserList, s conversion.Scope) error {
	return autoConvert_api_NodeUserList_To_v1_NodeUserList(in, out, s)
}

func autoConvert_v1_NodeUserSpec_To_api_NodeUserSpec(in *NodeUserSpec, out *api.NodeUserSpec, s conversion.Scope) error {
	if err := Convert_v1_UserReferences_To_api_UserReferences(&in.User, &out.User, s); err != nil {
		return err
	}
	out.NodeName = in.NodeName
	out.Phase = api.NodeUserPhase(in.Phase)
	return nil
}

func Convert_v1_NodeUserSpec_To_api_NodeUserSpec(in *NodeUserSpec, out *api.NodeUserSpec, s conversion.Scope) error {
	return autoConvert_v1_NodeUserSpec_To_api_NodeUserSpec(in, out, s)
}

func autoConvert_api_NodeUserSpec_To_v1_NodeUserSpec(in *api.NodeUserSpec, out *NodeUserSpec, s conversion.Scope) error {
	if err := Convert_api_UserReferences_To_v1_UserReferences(&in.User, &out.User, s); err != nil {
		return err
	}
	out.NodeName = in.NodeName
	out.Phase = NodeUserPhase(in.Phase)
	return nil
}

func Convert_api_NodeUserSpec_To_v1_NodeUserSpec(in *api.NodeUserSpec, out *NodeUserSpec, s conversion.Scope) error {
	return autoConvert_api_NodeUserSpec_To_v1_NodeUserSpec(in, out, s)
}

func autoConvert_v1_SSHKey_To_api_SSHKey(in *SSHKey, out *api.SSHKey, s conversion.Scope) error {
	out.KeyID = in.KeyID
	out.Name = in.Name
	out.Key = in.Key
	out.FingerPrint = in.FingerPrint
	return nil
}

func Convert_v1_SSHKey_To_api_SSHKey(in *SSHKey, out *api.SSHKey, s conversion.Scope) error {
	return autoConvert_v1_SSHKey_To_api_SSHKey(in, out, s)
}

func autoConvert_api_SSHKey_To_v1_SSHKey(in *api.SSHKey, out *SSHKey, s conversion.Scope) error {
	out.KeyID = in.KeyID
	out.Name = in.Name
	out.Key = in.Key
	out.FingerPrint = in.FingerPrint
	return nil
}

func Convert_api_SSHKey_To_v1_SSHKey(in *api.SSHKey, out *SSHKey, s conversion.Scope) error {
	return autoConvert_api_SSHKey_To_v1_SSHKey(in, out, s)
}

func autoConvert_v1_TargetAccServer_To_api_TargetAccServer(in *TargetAccServer, out *api.TargetAccServer, s conversion.Scope) error {
	out.Name = in.Name
	out.ID = in.ID
	out.Host = in.Host
	return nil
}

func Convert_v1_TargetAccServer_To_api_TargetAccServer(in *TargetAccServer, out *api.TargetAccServer, s conversion.Scope) error {
	return autoConvert_v1_TargetAccServer_To_api_TargetAccServer(in, out, s)
}

func autoConvert_api_TargetAccServer_To_v1_TargetAccServer(in *api.TargetAccServer, out *TargetAccServer, s conversion.Scope) error {
	out.Name = in.Name
	out.ID = in.ID
	out.Host = in.Host
	return nil
}

func Convert_api_TargetAccServer_To_v1_TargetAccServer(in *api.TargetAccServer, out *TargetAccServer, s conversion.Scope) error {
	return autoConvert_api_TargetAccServer_To_v1_TargetAccServer(in, out, s)
}

func autoConvert_v1_User_To_api_User(in *User, out *api.User, s conversion.Scope) error {
	// TODO: Inefficient conversion - can we improve it?
	if err := s.Convert(&in.ObjectMeta, &out.ObjectMeta, 0); err != nil {
		return err
	}
	if err := Convert_v1_UserSpec_To_api_UserSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

func Convert_v1_User_To_api_User(in *User, out *api.User, s conversion.Scope) error {
	return autoConvert_v1_User_To_api_User(in, out, s)
}

func autoConvert_api_User_To_v1_User(in *api.User, out *User, s conversion.Scope) error {
	// TODO: Inefficient conversion - can we improve it?
	if err := s.Convert(&in.ObjectMeta, &out.ObjectMeta, 0); err != nil {
		return err
	}
	if err := Convert_api_UserSpec_To_v1_UserSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

func Convert_api_User_To_v1_User(in *api.User, out *User, s conversion.Scope) error {
	return autoConvert_api_User_To_v1_User(in, out, s)
}

func autoConvert_v1_UserInfo_To_api_UserInfo(in *UserInfo, out *api.UserInfo, s conversion.Scope) error {
	out.ID = in.ID
	out.Passwd = in.Passwd
	out.Email = in.Email
	out.EnableOTA = in.EnableOTA
	out.TrafficLimit = in.TrafficLimit
	out.UploadTraffic = in.UploadTraffic
	out.DownloadTraffic = in.DownloadTraffic
	out.Name = in.Name
	out.ManagePasswd = in.ManagePasswd
	out.ExpireTime = in.ExpireTime
	out.EmailVerify = in.EmailVerify
	out.RegIPAddr = in.RegIPAddr
	out.RegDBTime = in.RegDBTime
	out.Description = in.Description
	out.TrafficRate = in.TrafficRate
	out.IsAdmin = in.IsAdmin
	out.LastCheckInTime = in.LastCheckInTime
	out.LastResetPwdTime = in.LastResetPwdTime
	out.TotalUploadTraffic = in.TotalUploadTraffic
	out.TotalDownloadTraffic = in.TotalDownloadTraffic
	out.Status = in.Status
	out.Delete = in.Delete
	out.Activation = in.Activation
	out.UserType = in.UserType
	out.Bandwidth = in.Bandwidth
	out.PackageType = in.PackageType
	out.Note = in.Note
	out.Extra = in.Extra
	return nil
}

func Convert_v1_UserInfo_To_api_UserInfo(in *UserInfo, out *api.UserInfo, s conversion.Scope) error {
	return autoConvert_v1_UserInfo_To_api_UserInfo(in, out, s)
}

func autoConvert_api_UserInfo_To_v1_UserInfo(in *api.UserInfo, out *UserInfo, s conversion.Scope) error {
	out.ID = in.ID
	out.Passwd = in.Passwd
	out.Email = in.Email
	out.EnableOTA = in.EnableOTA
	out.TrafficLimit = in.TrafficLimit
	out.UploadTraffic = in.UploadTraffic
	out.DownloadTraffic = in.DownloadTraffic
	out.Name = in.Name
	out.ManagePasswd = in.ManagePasswd
	out.ExpireTime = in.ExpireTime
	out.EmailVerify = in.EmailVerify
	out.RegIPAddr = in.RegIPAddr
	out.RegDBTime = in.RegDBTime
	out.Description = in.Description
	out.TrafficRate = in.TrafficRate
	out.IsAdmin = in.IsAdmin
	out.LastCheckInTime = in.LastCheckInTime
	out.LastResetPwdTime = in.LastResetPwdTime
	out.TotalUploadTraffic = in.TotalUploadTraffic
	out.TotalDownloadTraffic = in.TotalDownloadTraffic
	out.Status = in.Status
	out.Delete = in.Delete
	out.Activation = in.Activation
	out.UserType = in.UserType
	out.Bandwidth = in.Bandwidth
	out.PackageType = in.PackageType
	out.Note = in.Note
	out.Extra = in.Extra
	return nil
}

func Convert_api_UserInfo_To_v1_UserInfo(in *api.UserInfo, out *UserInfo, s conversion.Scope) error {
	return autoConvert_api_UserInfo_To_v1_UserInfo(in, out, s)
}

func autoConvert_v1_UserList_To_api_UserList(in *UserList, out *api.UserList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]api.User, len(*in))
		for i := range *in {
			if err := Convert_v1_User_To_api_User(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_v1_UserList_To_api_UserList(in *UserList, out *api.UserList, s conversion.Scope) error {
	return autoConvert_v1_UserList_To_api_UserList(in, out, s)
}

func autoConvert_api_UserList_To_v1_UserList(in *api.UserList, out *UserList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]User, len(*in))
		for i := range *in {
			if err := Convert_api_User_To_v1_User(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_api_UserList_To_v1_UserList(in *api.UserList, out *UserList, s conversion.Scope) error {
	return autoConvert_api_UserList_To_v1_UserList(in, out, s)
}

func autoConvert_v1_UserPublicFile_To_api_UserPublicFile(in *UserPublicFile, out *api.UserPublicFile, s conversion.Scope) error {
	// TODO: Inefficient conversion - can we improve it?
	if err := s.Convert(&in.ObjectMeta, &out.ObjectMeta, 0); err != nil {
		return err
	}
	if err := Convert_v1_UserPublicFileSpec_To_api_UserPublicFileSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

func Convert_v1_UserPublicFile_To_api_UserPublicFile(in *UserPublicFile, out *api.UserPublicFile, s conversion.Scope) error {
	return autoConvert_v1_UserPublicFile_To_api_UserPublicFile(in, out, s)
}

func autoConvert_api_UserPublicFile_To_v1_UserPublicFile(in *api.UserPublicFile, out *UserPublicFile, s conversion.Scope) error {
	// TODO: Inefficient conversion - can we improve it?
	if err := s.Convert(&in.ObjectMeta, &out.ObjectMeta, 0); err != nil {
		return err
	}
	if err := Convert_api_UserPublicFileSpec_To_v1_UserPublicFileSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

func Convert_api_UserPublicFile_To_v1_UserPublicFile(in *api.UserPublicFile, out *UserPublicFile, s conversion.Scope) error {
	return autoConvert_api_UserPublicFile_To_v1_UserPublicFile(in, out, s)
}

func autoConvert_v1_UserPublicFileList_To_api_UserPublicFileList(in *UserPublicFileList, out *api.UserPublicFileList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]api.UserPublicFile, len(*in))
		for i := range *in {
			if err := Convert_v1_UserPublicFile_To_api_UserPublicFile(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_v1_UserPublicFileList_To_api_UserPublicFileList(in *UserPublicFileList, out *api.UserPublicFileList, s conversion.Scope) error {
	return autoConvert_v1_UserPublicFileList_To_api_UserPublicFileList(in, out, s)
}

func autoConvert_api_UserPublicFileList_To_v1_UserPublicFileList(in *api.UserPublicFileList, out *UserPublicFileList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]UserPublicFile, len(*in))
		for i := range *in {
			if err := Convert_api_UserPublicFile_To_v1_UserPublicFile(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_api_UserPublicFileList_To_v1_UserPublicFileList(in *api.UserPublicFileList, out *UserPublicFileList, s conversion.Scope) error {
	return autoConvert_api_UserPublicFileList_To_v1_UserPublicFileList(in, out, s)
}

func autoConvert_v1_UserPublicFileSpec_To_api_UserPublicFileSpec(in *UserPublicFileSpec, out *api.UserPublicFileSpec, s conversion.Scope) error {
	out.FileName = in.FileName
	out.Description = in.Description
	return nil
}

func Convert_v1_UserPublicFileSpec_To_api_UserPublicFileSpec(in *UserPublicFileSpec, out *api.UserPublicFileSpec, s conversion.Scope) error {
	return autoConvert_v1_UserPublicFileSpec_To_api_UserPublicFileSpec(in, out, s)
}

func autoConvert_api_UserPublicFileSpec_To_v1_UserPublicFileSpec(in *api.UserPublicFileSpec, out *UserPublicFileSpec, s conversion.Scope) error {
	out.FileName = in.FileName
	out.Description = in.Description
	return nil
}

func Convert_api_UserPublicFileSpec_To_v1_UserPublicFileSpec(in *api.UserPublicFileSpec, out *UserPublicFileSpec, s conversion.Scope) error {
	return autoConvert_api_UserPublicFileSpec_To_v1_UserPublicFileSpec(in, out, s)
}

func autoConvert_v1_UserReferences_To_api_UserReferences(in *UserReferences, out *api.UserReferences, s conversion.Scope) error {
	out.ID = in.ID
	out.Name = in.Name
	out.Port = in.Port
	out.Method = in.Method
	out.Password = in.Password
	out.EnableOTA = in.EnableOTA
	out.UploadTraffic = in.UploadTraffic
	out.DownloadTraffic = in.DownloadTraffic
	return nil
}

func Convert_v1_UserReferences_To_api_UserReferences(in *UserReferences, out *api.UserReferences, s conversion.Scope) error {
	return autoConvert_v1_UserReferences_To_api_UserReferences(in, out, s)
}

func autoConvert_api_UserReferences_To_v1_UserReferences(in *api.UserReferences, out *UserReferences, s conversion.Scope) error {
	out.ID = in.ID
	out.Name = in.Name
	out.Port = in.Port
	out.Method = in.Method
	out.Password = in.Password
	out.EnableOTA = in.EnableOTA
	out.UploadTraffic = in.UploadTraffic
	out.DownloadTraffic = in.DownloadTraffic
	return nil
}

func Convert_api_UserReferences_To_v1_UserReferences(in *api.UserReferences, out *UserReferences, s conversion.Scope) error {
	return autoConvert_api_UserReferences_To_v1_UserReferences(in, out, s)
}

func autoConvert_v1_UserService_To_api_UserService(in *UserService, out *api.UserService, s conversion.Scope) error {
	// TODO: Inefficient conversion - can we improve it?
	if err := s.Convert(&in.ObjectMeta, &out.ObjectMeta, 0); err != nil {
		return err
	}
	if err := Convert_v1_UserServiceSpec_To_api_UserServiceSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

func Convert_v1_UserService_To_api_UserService(in *UserService, out *api.UserService, s conversion.Scope) error {
	return autoConvert_v1_UserService_To_api_UserService(in, out, s)
}

func autoConvert_api_UserService_To_v1_UserService(in *api.UserService, out *UserService, s conversion.Scope) error {
	// TODO: Inefficient conversion - can we improve it?
	if err := s.Convert(&in.ObjectMeta, &out.ObjectMeta, 0); err != nil {
		return err
	}
	if err := Convert_api_UserServiceSpec_To_v1_UserServiceSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

func Convert_api_UserService_To_v1_UserService(in *api.UserService, out *UserService, s conversion.Scope) error {
	return autoConvert_api_UserService_To_v1_UserService(in, out, s)
}

func autoConvert_v1_UserServiceBindingNodes_To_api_UserServiceBindingNodes(in *UserServiceBindingNodes, out *api.UserServiceBindingNodes, s conversion.Scope) error {
	// TODO: Inefficient conversion - can we improve it?
	if err := s.Convert(&in.ObjectMeta, &out.ObjectMeta, 0); err != nil {
		return err
	}
	if err := Convert_v1_UserServiceBindingNodesSpec_To_api_UserServiceBindingNodesSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

func Convert_v1_UserServiceBindingNodes_To_api_UserServiceBindingNodes(in *UserServiceBindingNodes, out *api.UserServiceBindingNodes, s conversion.Scope) error {
	return autoConvert_v1_UserServiceBindingNodes_To_api_UserServiceBindingNodes(in, out, s)
}

func autoConvert_api_UserServiceBindingNodes_To_v1_UserServiceBindingNodes(in *api.UserServiceBindingNodes, out *UserServiceBindingNodes, s conversion.Scope) error {
	// TODO: Inefficient conversion - can we improve it?
	if err := s.Convert(&in.ObjectMeta, &out.ObjectMeta, 0); err != nil {
		return err
	}
	if err := Convert_api_UserServiceBindingNodesSpec_To_v1_UserServiceBindingNodesSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

func Convert_api_UserServiceBindingNodes_To_v1_UserServiceBindingNodes(in *api.UserServiceBindingNodes, out *UserServiceBindingNodes, s conversion.Scope) error {
	return autoConvert_api_UserServiceBindingNodes_To_v1_UserServiceBindingNodes(in, out, s)
}

func autoConvert_v1_UserServiceBindingNodesSpec_To_api_UserServiceBindingNodesSpec(in *UserServiceBindingNodesSpec, out *api.UserServiceBindingNodesSpec, s conversion.Scope) error {
	if in.NodeUserReference != nil {
		in, out := &in.NodeUserReference, &out.NodeUserReference
		*out = make(map[string]api.NodeReferences, len(*in))
		for key, val := range *in {
			newVal := new(api.NodeReferences)
			if err := Convert_v1_NodeReferences_To_api_NodeReferences(&val, newVal, s); err != nil {
				return err
			}
			(*out)[key] = *newVal
		}
	} else {
		out.NodeUserReference = nil
	}
	out.NodeCnt = in.NodeCnt
	out.Status = in.Status
	return nil
}

func Convert_v1_UserServiceBindingNodesSpec_To_api_UserServiceBindingNodesSpec(in *UserServiceBindingNodesSpec, out *api.UserServiceBindingNodesSpec, s conversion.Scope) error {
	return autoConvert_v1_UserServiceBindingNodesSpec_To_api_UserServiceBindingNodesSpec(in, out, s)
}

func autoConvert_api_UserServiceBindingNodesSpec_To_v1_UserServiceBindingNodesSpec(in *api.UserServiceBindingNodesSpec, out *UserServiceBindingNodesSpec, s conversion.Scope) error {
	if in.NodeUserReference != nil {
		in, out := &in.NodeUserReference, &out.NodeUserReference
		*out = make(map[string]NodeReferences, len(*in))
		for key, val := range *in {
			newVal := new(NodeReferences)
			if err := Convert_api_NodeReferences_To_v1_NodeReferences(&val, newVal, s); err != nil {
				return err
			}
			(*out)[key] = *newVal
		}
	} else {
		out.NodeUserReference = nil
	}
	out.NodeCnt = in.NodeCnt
	out.Status = in.Status
	return nil
}

func Convert_api_UserServiceBindingNodesSpec_To_v1_UserServiceBindingNodesSpec(in *api.UserServiceBindingNodesSpec, out *UserServiceBindingNodesSpec, s conversion.Scope) error {
	return autoConvert_api_UserServiceBindingNodesSpec_To_v1_UserServiceBindingNodesSpec(in, out, s)
}

func autoConvert_v1_UserServiceList_To_api_UserServiceList(in *UserServiceList, out *api.UserServiceList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]api.UserService, len(*in))
		for i := range *in {
			if err := Convert_v1_UserService_To_api_UserService(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_v1_UserServiceList_To_api_UserServiceList(in *UserServiceList, out *api.UserServiceList, s conversion.Scope) error {
	return autoConvert_v1_UserServiceList_To_api_UserServiceList(in, out, s)
}

func autoConvert_api_UserServiceList_To_v1_UserServiceList(in *api.UserServiceList, out *UserServiceList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]UserService, len(*in))
		for i := range *in {
			if err := Convert_api_UserService_To_v1_UserService(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_api_UserServiceList_To_v1_UserServiceList(in *api.UserServiceList, out *UserServiceList, s conversion.Scope) error {
	return autoConvert_api_UserServiceList_To_v1_UserServiceList(in, out, s)
}

func autoConvert_v1_UserServiceSpec_To_api_UserServiceSpec(in *UserServiceSpec, out *api.UserServiceSpec, s conversion.Scope) error {
	out.NodeName = in.NodeName
	out.Host = in.Host
	if err := Convert_v1_UserReferences_To_api_UserReferences(&in.UserRefer, &out.UserRefer, s); err != nil {
		return err
	}
	out.Delete = in.Delete
	return nil
}

func Convert_v1_UserServiceSpec_To_api_UserServiceSpec(in *UserServiceSpec, out *api.UserServiceSpec, s conversion.Scope) error {
	return autoConvert_v1_UserServiceSpec_To_api_UserServiceSpec(in, out, s)
}

func autoConvert_api_UserServiceSpec_To_v1_UserServiceSpec(in *api.UserServiceSpec, out *UserServiceSpec, s conversion.Scope) error {
	out.NodeName = in.NodeName
	out.Host = in.Host
	if err := Convert_api_UserReferences_To_v1_UserReferences(&in.UserRefer, &out.UserRefer, s); err != nil {
		return err
	}
	out.Delete = in.Delete
	return nil
}

func Convert_api_UserServiceSpec_To_v1_UserServiceSpec(in *api.UserServiceSpec, out *UserServiceSpec, s conversion.Scope) error {
	return autoConvert_api_UserServiceSpec_To_v1_UserServiceSpec(in, out, s)
}

func autoConvert_v1_UserSpec_To_api_UserSpec(in *UserSpec, out *api.UserSpec, s conversion.Scope) error {
	if err := Convert_v1_UserInfo_To_api_UserInfo(&in.DetailInfo, &out.DetailInfo, s); err != nil {
		return err
	}
	if err := Convert_v1_BindingNodes_To_api_BindingNodes(&in.UserService, &out.UserService, s); err != nil {
		return err
	}
	return nil
}

func Convert_v1_UserSpec_To_api_UserSpec(in *UserSpec, out *api.UserSpec, s conversion.Scope) error {
	return autoConvert_v1_UserSpec_To_api_UserSpec(in, out, s)
}

func autoConvert_api_UserSpec_To_v1_UserSpec(in *api.UserSpec, out *UserSpec, s conversion.Scope) error {
	if err := Convert_api_UserInfo_To_v1_UserInfo(&in.DetailInfo, &out.DetailInfo, s); err != nil {
		return err
	}
	if err := Convert_api_BindingNodes_To_v1_BindingNodes(&in.UserService, &out.UserService, s); err != nil {
		return err
	}
	return nil
}

func Convert_api_UserSpec_To_v1_UserSpec(in *api.UserSpec, out *UserSpec, s conversion.Scope) error {
	return autoConvert_api_UserSpec_To_v1_UserSpec(in, out, s)
}

func autoConvert_v1_UserToken_To_api_UserToken(in *UserToken, out *api.UserToken, s conversion.Scope) error {
	// TODO: Inefficient conversion - can we improve it?
	if err := s.Convert(&in.ObjectMeta, &out.ObjectMeta, 0); err != nil {
		return err
	}
	if err := Convert_v1_UserTokenSpec_To_api_UserTokenSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

func Convert_v1_UserToken_To_api_UserToken(in *UserToken, out *api.UserToken, s conversion.Scope) error {
	return autoConvert_v1_UserToken_To_api_UserToken(in, out, s)
}

func autoConvert_api_UserToken_To_v1_UserToken(in *api.UserToken, out *UserToken, s conversion.Scope) error {
	// TODO: Inefficient conversion - can we improve it?
	if err := s.Convert(&in.ObjectMeta, &out.ObjectMeta, 0); err != nil {
		return err
	}
	if err := Convert_api_UserTokenSpec_To_v1_UserTokenSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

func Convert_api_UserToken_To_v1_UserToken(in *api.UserToken, out *UserToken, s conversion.Scope) error {
	return autoConvert_api_UserToken_To_v1_UserToken(in, out, s)
}

func autoConvert_v1_UserTokenList_To_api_UserTokenList(in *UserTokenList, out *api.UserTokenList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]api.UserToken, len(*in))
		for i := range *in {
			if err := Convert_v1_UserToken_To_api_UserToken(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_v1_UserTokenList_To_api_UserTokenList(in *UserTokenList, out *api.UserTokenList, s conversion.Scope) error {
	return autoConvert_v1_UserTokenList_To_api_UserTokenList(in, out, s)
}

func autoConvert_api_UserTokenList_To_v1_UserTokenList(in *api.UserTokenList, out *UserTokenList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]UserToken, len(*in))
		for i := range *in {
			if err := Convert_api_UserToken_To_v1_UserToken(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_api_UserTokenList_To_v1_UserTokenList(in *api.UserTokenList, out *UserTokenList, s conversion.Scope) error {
	return autoConvert_api_UserTokenList_To_v1_UserTokenList(in, out, s)
}

func autoConvert_v1_UserTokenSpec_To_api_UserTokenSpec(in *UserTokenSpec, out *api.UserTokenSpec, s conversion.Scope) error {
	out.ID = in.ID
	out.Token = in.Token
	out.UserID = in.UserID
	out.CreateTime = in.CreateTime
	out.ExpireTime = in.ExpireTime
	out.Name = in.Name
	return nil
}

func Convert_v1_UserTokenSpec_To_api_UserTokenSpec(in *UserTokenSpec, out *api.UserTokenSpec, s conversion.Scope) error {
	return autoConvert_v1_UserTokenSpec_To_api_UserTokenSpec(in, out, s)
}

func autoConvert_api_UserTokenSpec_To_v1_UserTokenSpec(in *api.UserTokenSpec, out *UserTokenSpec, s conversion.Scope) error {
	out.ID = in.ID
	out.Token = in.Token
	out.UserID = in.UserID
	out.CreateTime = in.CreateTime
	out.ExpireTime = in.ExpireTime
	out.Name = in.Name
	return nil
}

func Convert_api_UserTokenSpec_To_v1_UserTokenSpec(in *api.UserTokenSpec, out *UserTokenSpec, s conversion.Scope) error {
	return autoConvert_api_UserTokenSpec_To_v1_UserTokenSpec(in, out, s)
}

func autoConvert_v1_VultrAccountInfo_To_api_VultrAccountInfo(in *VultrAccountInfo, out *api.VultrAccountInfo, s conversion.Scope) error {
	out.Balance = in.Balance
	out.PendingCharges = in.PendingCharges
	out.LastPaymentDate = in.LastPaymentDate
	out.LastPaymentAmount = in.LastPaymentAmount
	return nil
}

func Convert_v1_VultrAccountInfo_To_api_VultrAccountInfo(in *VultrAccountInfo, out *api.VultrAccountInfo, s conversion.Scope) error {
	return autoConvert_v1_VultrAccountInfo_To_api_VultrAccountInfo(in, out, s)
}

func autoConvert_api_VultrAccountInfo_To_v1_VultrAccountInfo(in *api.VultrAccountInfo, out *VultrAccountInfo, s conversion.Scope) error {
	out.Balance = in.Balance
	out.PendingCharges = in.PendingCharges
	out.LastPaymentDate = in.LastPaymentDate
	out.LastPaymentAmount = in.LastPaymentAmount
	return nil
}

func Convert_api_VultrAccountInfo_To_v1_VultrAccountInfo(in *api.VultrAccountInfo, out *VultrAccountInfo, s conversion.Scope) error {
	return autoConvert_api_VultrAccountInfo_To_v1_VultrAccountInfo(in, out, s)
}

func autoConvert_v1_VultrServerInfo_To_api_VultrServerInfo(in *VultrServerInfo, out *api.VultrServerInfo, s conversion.Scope) error {
	out.CreatedTime = in.CreatedTime
	out.Location = in.Location
	out.Name = in.Name
	out.Status = in.Status
	out.IPV4Addr = in.IPV4Addr
	out.IPV4NetMask = in.IPV4NetMask
	out.IPV4Gateway = in.IPV4Gateway
	out.PendingCharges = in.PendingCharges
	out.CostPerMonth = in.CostPerMonth
	out.AllowedBandWidth = in.AllowedBandWidth
	out.CurrentBandwidth = in.CurrentBandwidth
	return nil
}

func Convert_v1_VultrServerInfo_To_api_VultrServerInfo(in *VultrServerInfo, out *api.VultrServerInfo, s conversion.Scope) error {
	return autoConvert_v1_VultrServerInfo_To_api_VultrServerInfo(in, out, s)
}

func autoConvert_api_VultrServerInfo_To_v1_VultrServerInfo(in *api.VultrServerInfo, out *VultrServerInfo, s conversion.Scope) error {
	out.CreatedTime = in.CreatedTime
	out.Location = in.Location
	out.Name = in.Name
	out.Status = in.Status
	out.IPV4Addr = in.IPV4Addr
	out.IPV4NetMask = in.IPV4NetMask
	out.IPV4Gateway = in.IPV4Gateway
	out.PendingCharges = in.PendingCharges
	out.CostPerMonth = in.CostPerMonth
	out.AllowedBandWidth = in.AllowedBandWidth
	out.CurrentBandwidth = in.CurrentBandwidth
	return nil
}

func Convert_api_VultrServerInfo_To_v1_VultrServerInfo(in *api.VultrServerInfo, out *VultrServerInfo, s conversion.Scope) error {
	return autoConvert_api_VultrServerInfo_To_v1_VultrServerInfo(in, out, s)
}
