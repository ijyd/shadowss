// +build !ignore_autogenerated

/*
Copyright 2016 The cloud-keeper Authors.
*/

// This file was autogenerated by deepcopy-gen. Do not edit it manually!

package api

import (
	pkg_api "gofreezer/pkg/api"
	conversion "gofreezer/pkg/conversion"
	runtime "gofreezer/pkg/runtime"
	reflect "reflect"
	time "time"
)

func init() {
	SchemeBuilder.Register(RegisterDeepCopies)
}

// RegisterDeepCopies adds deep-copy functions to the given scheme. Public
// to allow building arbitrary schemes.
func RegisterDeepCopies(scheme *runtime.Scheme) error {
	return scheme.AddGeneratedDeepCopyFuncs(
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_api_Login, InType: reflect.TypeOf(&Login{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_api_LoginList, InType: reflect.TypeOf(&LoginList{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_api_LoginSpec, InType: reflect.TypeOf(&LoginSpec{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_api_LoginUser, InType: reflect.TypeOf(&LoginUser{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_api_User, InType: reflect.TypeOf(&User{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_api_UserInfo, InType: reflect.TypeOf(&UserInfo{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_api_UserList, InType: reflect.TypeOf(&UserList{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_api_UserSpec, InType: reflect.TypeOf(&UserSpec{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_api_UserToken, InType: reflect.TypeOf(&UserToken{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_api_UserTokenList, InType: reflect.TypeOf(&UserTokenList{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_api_UserTokenSpec, InType: reflect.TypeOf(&UserTokenSpec{})},
	)
}

func DeepCopy_api_Login(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*Login)
		out := out.(*Login)
		out.TypeMeta = in.TypeMeta
		if err := pkg_api.DeepCopy_api_ObjectMeta(&in.ObjectMeta, &out.ObjectMeta, c); err != nil {
			return err
		}
		out.Spec = in.Spec
		return nil
	}
}

func DeepCopy_api_LoginList(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*LoginList)
		out := out.(*LoginList)
		out.TypeMeta = in.TypeMeta
		out.ListMeta = in.ListMeta
		if in.Items != nil {
			in, out := &in.Items, &out.Items
			*out = make([]Login, len(*in))
			for i := range *in {
				if newVal, err := c.DeepCopy(&(*in)[i]); err != nil {
					return err
				} else {
					(*out)[i] = *newVal.(*Login)
				}
			}
		} else {
			out.Items = nil
		}
		return nil
	}
}

func DeepCopy_api_LoginSpec(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*LoginSpec)
		out := out.(*LoginSpec)
		out.AuthName = in.AuthName
		out.Auth = in.Auth
		out.Token = in.Token
		return nil
	}
}

func DeepCopy_api_LoginUser(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*LoginUser)
		out := out.(*LoginUser)
		out.ID = in.ID
		out.UserName = in.UserName
		if newVal, err := c.DeepCopy(&in.LoginTime); err != nil {
			return err
		} else {
			out.LoginTime = *newVal.(*time.Time)
		}
		out.Count = in.Count
		out.Status = in.Status
		return nil
	}
}

func DeepCopy_api_User(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*User)
		out := out.(*User)
		out.TypeMeta = in.TypeMeta
		if err := pkg_api.DeepCopy_api_ObjectMeta(&in.ObjectMeta, &out.ObjectMeta, c); err != nil {
			return err
		}
		if newVal, err := c.DeepCopy(&in.Spec); err != nil {
			return err
		} else {
			out.Spec = *newVal.(*UserSpec)
		}
		return nil
	}
}

func DeepCopy_api_UserInfo(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*UserInfo)
		out := out.(*UserInfo)
		out.ID = in.ID
		out.Passwd = in.Passwd
		out.Email = in.Email
		out.EnableOTA = in.EnableOTA
		out.TrafficLimit = in.TrafficLimit
		out.UploadTraffic = in.UploadTraffic
		out.DownloadTraffic = in.DownloadTraffic
		out.Name = in.Name
		out.ManagePasswd = in.ManagePasswd
		out.ExpireTime = in.ExpireTime.DeepCopy()
		out.EmailVerify = in.EmailVerify
		out.RegIPAddr = in.RegIPAddr
		out.RegDBTime = in.RegDBTime.DeepCopy()
		out.Description = in.Description
		out.TrafficRate = in.TrafficRate
		out.IsAdmin = in.IsAdmin
		out.LastCheckInTime = in.LastCheckInTime.DeepCopy()
		out.LastResetPwdTime = in.LastResetPwdTime.DeepCopy()
		out.TotalUploadTraffic = in.TotalUploadTraffic
		out.TotalDownloadTraffic = in.TotalDownloadTraffic
		out.Status = in.Status
		return nil
	}
}

func DeepCopy_api_UserList(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*UserList)
		out := out.(*UserList)
		out.TypeMeta = in.TypeMeta
		out.ListMeta = in.ListMeta
		if in.Items != nil {
			in, out := &in.Items, &out.Items
			*out = make([]User, len(*in))
			for i := range *in {
				if newVal, err := c.DeepCopy(&(*in)[i]); err != nil {
					return err
				} else {
					(*out)[i] = *newVal.(*User)
				}
			}
		} else {
			out.Items = nil
		}
		return nil
	}
}

func DeepCopy_api_UserSpec(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*UserSpec)
		out := out.(*UserSpec)
		if newVal, err := c.DeepCopy(&in.DetailInfo); err != nil {
			return err
		} else {
			out.DetailInfo = *newVal.(*UserInfo)
		}
		return nil
	}
}

func DeepCopy_api_UserToken(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*UserToken)
		out := out.(*UserToken)
		out.TypeMeta = in.TypeMeta
		if err := pkg_api.DeepCopy_api_ObjectMeta(&in.ObjectMeta, &out.ObjectMeta, c); err != nil {
			return err
		}
		if newVal, err := c.DeepCopy(&in.Spec); err != nil {
			return err
		} else {
			out.Spec = *newVal.(*UserTokenSpec)
		}
		return nil
	}
}

func DeepCopy_api_UserTokenList(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*UserTokenList)
		out := out.(*UserTokenList)
		out.TypeMeta = in.TypeMeta
		out.ListMeta = in.ListMeta
		if in.Items != nil {
			in, out := &in.Items, &out.Items
			*out = make([]UserToken, len(*in))
			for i := range *in {
				if newVal, err := c.DeepCopy(&(*in)[i]); err != nil {
					return err
				} else {
					(*out)[i] = *newVal.(*UserToken)
				}
			}
		} else {
			out.Items = nil
		}
		return nil
	}
}

func DeepCopy_api_UserTokenSpec(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*UserTokenSpec)
		out := out.(*UserTokenSpec)
		out.ID = in.ID
		out.Token = in.Token
		out.UserID = in.UserID
		out.CreateTime = in.CreateTime.DeepCopy()
		out.ExpireTime = in.ExpireTime.DeepCopy()
		out.Name = in.Name
		return nil
	}
}
